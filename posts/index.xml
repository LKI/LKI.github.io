<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 浮云计算</title>
    <link>https://liriansu.com/posts/</link>
    <description>Recent content in Posts on 浮云计算</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Oct 2019 22:32:20 +0000</lastBuildDate>
    
	<atom:link href="https://liriansu.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[轶事] 为什么 requests 不是 python 标准库？</title>
      <link>https://liriansu.com/posts/2019-10-30-anecdote-why-requests-not-standard/</link>
      <pubDate>Wed, 30 Oct 2019 22:32:20 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-10-30-anecdote-why-requests-not-standard/</guid>
      <description>前几年一次跟耗子哥聊天，
他说：“你终有一天会从 stackoverflow 上找 bugfix,
进化到从 github issue 里找 bugfix.”
一语成谶。
 头部注释 我非常喜欢@灵剑 说的这么一段话：
 软件维护有两种截然不同的思路：
一种是所有的依赖都追踪最新版，
一旦出最新版立即开始试用；
另一种是所有的依赖都选择一个不会变的固定版本，
能不升级就不升级。
 看见软件的新陈代谢，给写代码的我带来了无穷的热爱与动力，
同时也给我带来了很多 github issues&amp;hellip;
代码是人写的，bug 也是人写的，bugfix 也还是人写的，
github issue 的文字里也充满了各种各样有血有肉的充满既视感的评论。
issue 的文字虽然隔着时间空间上的距离，
但就像 xkcd 979 - wisdom of the ancients 表达的那样，
有些情绪就是亘古不变的。
在工作中 debug 的时候，
对于具体的 issue,
同事们都留下过很多精彩的讨论。
鉴于这样，
我决定开辟一个“轶事”的专栏，
专门来讲一讲那些好玩的 issue.
为什么 requests 不是 python 标准库？  原文地址:
https://github.com/psf/requests/issues/2424
 Kenneth Reitz 是一个业界知名的程序员，
很多人了解他可能是因为他从两百多斤的胖子变成一个超帅的玩摄影的程序员，
其实专业过硬的他是写出过 python-requests, httpbin 等好用的工具库的。</description>
    </item>
    
    <item>
      <title>没错，DNS TTL 字段就是骗你的</title>
      <link>https://liriansu.com/posts/2019-10-29-stupid-dns-ttl/</link>
      <pubDate>Tue, 29 Oct 2019 21:49:42 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-10-29-stupid-dns-ttl/</guid>
      <description>By design,
the Internet core is stupid,
and the edge is smart.
  引子 前几天在网上冲浪的时候，
看到了一篇讲 DNS 的宝藏文章：
DNS TTL Violations in the Wild.
之所以对我来说是宝藏文章，
因为在读了第一段以后，
我就发现了一个我习以为常的认知其实在实际是错误✖的：
业界都会遵守 DNS 的 TTL 超时逻辑。
然而实际上是：
业界都知道 DNS 的 TTL 超时逻辑，但不一定这么实现。
事件 前几周我们出了个 Bug,
影响了整个开发、测试环境。
我们有很大一块的业务是跟微信做各类 py 交易，
微信要求说我们给个回调域名，
每 10 分钟会推送一个凭证，
我们要用微信最新的凭证去调他们的接口。
最早我们给微信配的回调域名背后是个 AWS ELB,
这是一个亚马逊云上面的旧版负载均衡；
后来我们打算换成新版负载均衡 AWS ALB。
这个操作就很简单嘛，
到 DNS 服务商里看了一下，
微信回调的域名解析 TTL 是 600 秒，
又是开发测试环境；</description>
    </item>
    
    <item>
      <title>Pythonista 的 Go 之旅</title>
      <link>https://liriansu.com/posts/2019-06-13-go-experience-as-a-pythonista/</link>
      <pubDate>Thu, 13 Jun 2019 01:10:49 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-06-13-go-experience-as-a-pythonista/</guid>
      <description>背景 我们团队后端主要技术栈是 Python,
具体的软工实践在前文 django/python 里有详细的介绍。
由于平时做公司业务主要写的是 Python,
自己做的项目也是 Python 工具，
所以其实一直想尝试体验一下 Go。
正好上周有空，
于是体验了一下 Go 的基础设定，
用 Go 写了一个小服务（微信消息推送）。
这篇文章讲的就是一个 Pythonista 的 Go 萌新之路。
有理解谬误、操作不当的地方，
请各位多指教了。
语法 上手一个语言，
总是习惯性打开 learn x in y minutes 先过一遍语法。
Go 的特别之处是它的关键字非常少，
这让 Go 的语法很容易被记下来。
总的来说我觉得这几个语法很好玩。
循环 // 直接 for 就可以写死循环 for { fmt.Println(&amp;quot;while true...&amp;quot;) } // range 这个关键词用起来很舒服 data := map[string]string{ &amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;, } for key, value := range data { fmt.</description>
    </item>
    
    <item>
      <title>密度不高地生活了一下子</title>
      <link>https://liriansu.com/posts/2019-06-11-fuzzy-days/</link>
      <pubDate>Tue, 11 Jun 2019 22:50:03 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-06-11-fuzzy-days/</guid>
      <description>好久没记录思考了。
虽然陶菲格一直在催我在思想逝去前记下来，
但我总有种感觉：
最近的人生密度不是很大。
 今晚照常以社畜的身份下班回家，
米娅已经刷完日常准备睡觉了。
听着她断断续续哼着耳机里不知道什么歌的旋律，
好久没去唱歌的想法突然从我脑子里游了过去。
“唉，最近又觉得人生好虚无了。”
晚上进楼道电梯的时候，
有两只母蚊子跟了上来。
她们绕着裸露在短袖外面的手臂转了好几圈，
靠着敏捷高，
躲开了我好几下拍击。
于是我双手交叉，
假装在电梯里思考人生，
趁蚊子被我的冷静愣住的时候，
嗖一下冲出了停稳的电梯。
现代人的确太容易陷入集体性情绪了，
而个人的悲叹又显得太无力。
米娅上周收获了一个她的宝藏节目《乐队的夏天》，
几十只乐队的现场后劲加在一起，
抵得上《波西米亚狂想曲》的后劲。
她昨天晚上突然问我：
“你作为 A 站老用户，
有没有那种自己喜欢了很久的小众爱好，
后来突然火了感觉很挫败的感觉？”
在“我不是我没有别瞎说”的第一否认力还没生效的时候，
我脑子里闪过了一百个单词。
“有，还不少。”
我还是这么回答了。
在米娅下一个问题还没问出口之前，
我也提前给了她答案：
“是的，后面我就不喜欢了。”
最近工作感觉比较无力的一点是，
我真切地感受到了“技术不是瓶颈”在工作中的存在，
有不少同事也因为这点而另谋高就了。
虽然说新陈代谢是组织保持活力的必要成分，
但“生命很大世界更大”这句话也重复的有点疲惫。</description>
    </item>
    
    <item>
      <title>谈谈《谈 996》</title>
      <link>https://liriansu.com/posts/2019-04-14-meta-996/</link>
      <pubDate>Sun, 14 Apr 2019 15:16:24 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-04-14-meta-996/</guid>
      <description>很多人会喜欢 Lisp 里的宏 (Macro)。
语言里的宏提供了一种元编程 (Meta-Progamming) 的能力。
假如你用过魔兽世界里的宏，
你也可以想象这里的“元游戏”是什么意思：
它注重的不是游戏本身，
而是对游戏求导所得出的“游戏的本质”。
 今天这篇《谈谈&amp;lt;谈 996&amp;gt;》其实是我想写的一篇方法论的文章，
或者我更喜欢称之为: Meta 文章。
历史的进程 最近因为 github/996icu 项目引出了一系列的事件，
在我看来基本上是像人血馒头一样是可以吃的津津有味的。
一次大型的社会性事件中，
最好玩的是看人类社会的不同角色对事件本身发表的看法。
而且基本上“屁股决定脑袋”或者说“你会成为你喜欢的人”这种道理都是不变的。
每当这时候我就会想起筱敏写的那句话：
 1789年7月14日巴黎人民攻克巴士底狱的当夜，
当路易十六听闻消息时惊慌地问：
“这是一场叛乱吗？”
他的廷利昂古尔公爵当即回答道：
“不，陛下，这是一场革命。”
 社会是由人类组成的，
所以这个整体有的时候会表现出奇特的单人所不具有的特性，
进而进行组织性的进化与修复。
最终回过头看，
不禁就会发出江学长那样的感慨：
个人的奋斗是很重要，
但也要兼顾历史的进程啊。
言论管理 我其实蛮喜欢看一些八卦文章的。
（比如推荐一个博主叫“萝严肃”，
他写的长文都会查不少背景知识）
石原里美在文章里经常被表扬“表情管理”做得很好。
同样地，“言论管理”也是资本家会被重点关注的一处特质。
带着这点去看各个资本家的行动，
就很有意思了。
有一部分资本家的言论管理就是少说话，
外界对他们的评价就是“比较技术”。
而很大一部分资本家的发言就很精妙，
他们会为了心中更美好的世界而发言。
但可惜的是，
人类的悲喜并不相通。
涉及公益、教育这种大家都认可的话题还好，
但工作这个话题本身就涉及社会性分工，
不同的人会因为不同的事情有不同的感受。
假如资本家在“996工作制度”这个话题上直白的表达“我非常享受工作本身”及其类似的观点，
很自然地会收到无区别的批判，
因为这个时候他的原罪是他的身份。
当一个人的符号属性重于社会属性时，
他发表的所有言论都应当有明确的导向性目的。
这就是“言论管理”。
自我认知 以前上学考试结束以后，
总有人会哀嚎“哎呀考试考砸了完了完了。”
结果最后他成绩非常好。
虽然也有个说法叫“本质是因为怕被认为无能”，
但不论如何，</description>
    </item>
    
    <item>
      <title>软件工程实践之 django/python</title>
      <link>https://liriansu.com/posts/2019-04-10-software-engineering-django/</link>
      <pubDate>Wed, 10 Apr 2019 22:09:55 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-04-10-software-engineering-django/</guid>
      <description>软件工程实践系列文章，
会着重讲述实际的工程项目中是如何协作开发软件的。
本文主要介绍了 django/python 系列的工具链。
 outline 本文包括以下内容：
 outline
 django: 一个搭建后端服务的工具箱。
 framework: django vs flask/tornado/spring/laravel
 restful: django/restframework/swagger
 worker: django/uwsgi/gevent/celery/channels
 database: django/mysql/sqlite/migrations
  python: 一门依赖开发者的语言。
 developing: gitlab/pipenv/docker
 quality: unittest/pytest/flake8/pylint/yapf
 deploy: fabric/aws/nginx
  conclusion
  django django 是一个大名鼎鼎的后端开发框架，
它自己的口号是 the web framework for perfectionists with deadlines.
在我用 django 开发的这几年来，
我觉得它是一个逻辑上自洽，
并且为了逻辑自洽甚至舍弃了一部分功能的框架。
framework &amp;gt; search google for django vs
讲框架避免不了的是同行竞争，</description>
    </item>
    
    <item>
      <title>《流浪地球》电影观感</title>
      <link>https://liriansu.com/posts/2019-02-06-wandering-earth/</link>
      <pubDate>Wed, 06 Feb 2019 13:45:34 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-02-06-wandering-earth/</guid>
      <description>假如你想跟家人在春节去看场电影的话，
非常推荐去看看《流浪地球》。
（本文可能只有轻微剧透。）
 电影 电影本身我认为是一个非常成功的类型片，
加上了国产滤镜跟科幻滤镜以后，
口碑在春节档电影里排第一也是可以想象的。
电影剧情的底子其实跟《钢铁侠》《超人归来》之类的超级英雄电影本质上是一样的：
主角出生 - 锻炼自己 - 遇到低谷 - 组成团队 - 创造奇迹 - 拯救世界。
这样的类型片近十年已经有不少了，
要想在他们中间脱颖而出，
需要能把故事讲好。
大刘（刘慈欣）就在这里发挥了非常重要的作用了。（我脑补的）
虽然电影故事是在原作小说一段子情节之上，
原创发挥出的独立故事。
但电影开场的字母上写了“全程监制：刘慈欣”几个字，
整个剧本也透出了一股浓浓的“刘氏直男科幻”的味道。
无论是最开始的“中国味道赛博朋克”的都市背景，
还是中间提到的“饱和救援”方法论，
甚至是贯穿电影的转折，
都用厚重的真实感冲淡了一部分超级英雄类型片本身的魔幻感。
进而这又引出了这个电影非常“共产主义”的一部分：
电影里的超级英雄不是个体，
而是人类这个集体。
之前看过一个说法，
说外国人看三国看到的是那个年代里英雄闪烁，
中国人看三国看到的是刘皇叔山穷水尽也要带上人民。
《流浪地球》也是一样，
虽然电影的镜头跟着主角一行人，
但是我们可以清晰地感知到：
是人类本身，在创造人类自身的历史。
除了原作者监制、共产主义精神这两点，
《流浪地球》电影里还有一点能让我露出“老母亲式”微笑的：
故事讲得圆。
整个电影埋了不少伏笔，
虽然有些可能让观众能猜出后面剧情的进程，
但是电影并没有给人一种“穿山甲最后怎么了？”的失落感，
基本埋的伏笔都用上了，
而且还疑似致敬了大刘另一本小说的剧情，
提到了一个彩蛋。
总的来说，电影本身的原作者监制、共产主义精神、故事讲得圆，
这三点让它成为了一部不错的类型片。
缺点的话其实要讲也有不少，
但在我的滤镜加持下就不提了。
额外提一句，假如是受“战狼PTSD”的影响有点怕吴京的话，
这部片里吴京武戏不多，
可以安心观影。
感受 先打个岔讲个好玩的
我是跟家人一起去看的电影，
去的是一家“4D电影院”。
我们都知道3D是指长宽高，
那多出来的第4D在哪呢？
电影里冰天雪地吹大风的时候，
电影院的扶手会朝你吹风；
电影里主角开车颠簸的时候，
电影院的椅子会疯狂颠你；
电影里东西砸下来的时候，</description>
    </item>
    
    <item>
      <title>如何构建工程师团队</title>
      <link>https://liriansu.com/posts/2019-01-28-developer-team/</link>
      <pubDate>Mon, 28 Jan 2019 23:46:45 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-01-28-developer-team/</guid>
      <description>“工程师团队”这个话题我一直非常好奇，
我经常会问我的朋友们：
“你们公司这个是怎么样的？”
这篇文章讲的就是我自己对于这个话题的思考。
 引子 上一篇《积极面思考》中提到了，
最近写的东西都更偏向于“道”一些。
本文虽然标题是叫“如何构建工程师团队”，
但其实讲的东西基本都是主观的想法，
或者不考虑标题长度的话，
更恰当的标题说不定是：
《我们仍未知道那天苏子岳脑海中幻想的是一个什么样的工程师团队》。
主要涉及的观点可能包括如下：
 自己
 像游戏主程序员一样工作
 信赖，往往会创造出美好的境界
 永远抱着初心者的空杯心态
  团队
 四世三公的三公指的是公平、公正与公开
 用工具践行自动化
 我爸爸是刘备：放权
  文化
 《程序员的二八定律》
 《积极面思考》
 在种田与爆兵中寻找平衡
  其它的标题党话题
 真的是写 PPT 的不如讲 PPT 的，讲 PPT 的不如听 PPT 的吗？
 早上九点上班，晚上九点下班，一周上六天班，好吗？
 《为什么我不招你当我的员工》
 《搞 IT 的培训三个月就月入上万？》
   本来这里想用单个词语来概括标题的（就像我以前的说明文那样），
但是想想，危言耸听胡言乱语好像也更加 Drama 一些。
那我们就篡改一下张梅的《写给未来的你》来引出正文吧：</description>
    </item>
    
    <item>
      <title>积极面思考</title>
      <link>https://liriansu.com/posts/2019-01-23-about-active-thinking/</link>
      <pubDate>Wed, 23 Jan 2019 23:25:20 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-01-23-about-active-thinking/</guid>
      <description>最近半年对方法论的思考比较多，
所以可能写的都跟“术”关系不大，
而更加偏向于“道”一些。
 引子 我记得中学历史课本中，
在很前面的显眼位置上，
写着这么一句李世民对魏征的评价：
“夫以铜为镜，可以正衣冠；
以史为镜，可以知兴替；
以人为镜，可以明得失。”
这句话就像图书馆的闭馆铃声一样，
总会在深夜让我抽离自己的身躯，
以一个更高维的角度看自己、看别人。
就像在《写程序的我的性格》跟《毕业三年的报告》里面我自己反复念叨的一样，
工作很容易让没有防备的人类变成自我重复的机器。
前阵子跟一个产品的好朋友聊天，
讲到招人的喜好，
他说他只喜欢那种“工作经验大于工龄”的人。
或者换句话说，“工作的效率比大部分人都要高”的人。
在我看来，成为一个效率比别人高的人并不难。
其中一条很有效的办法，我称之为“积极面思考”。
什么是积极面思考 简单来说，就是从事情的正面去思考问题。
比如举个有点小众的栗子。
蓝猫的配音演员是葛平，他曾经也陷入过跟六小龄童一样的恶搞文化中心里，
但他既没逃避也没斥责，而是“放下了身段”跟恶搞他的大家玩成了一片。
最终大部分恶搞的同学都“路人转粉”，尊称他为“葛叔”了。
同样的道理，只要六小龄童老师能跟“六学家”们打成一片，他的风评也会再次走高的。
再举个工作中的栗子。
工作里少不了的事情是协同合作，
而多人协同合作容易导致“因为沟通的问题影响到了事情的进度”。
遇到沟通所产生问题的时候，
不论是文本化记录结果、寻求拍板人甚至是自己多做一点减少沟通的量，
都是有效的正面思考问题产生的行为。
而像分责推锅就并不是从事情的正面去思考问题了。
当面对问题的时候，能不怕问题，
不用懒政跟拖延去推迟问题的解决时间，
而是从解决问题的根本去思考、行动，
这就是积极面思考。
为什么要积极面思考 积极面思考是解决问题的捷径 我司有一点“中国互联网公司的通病”：微信办公。
之前我还在做B端业务的时候，
我微信里工作群有 300 多个，
基本上是周六正在跟女朋友约会，
然后突然就被拉进了一个微信群处理问题，
因为这点我还成为过电影院里看手机的我眼中的“无素质人群”。
当时我非常崩溃。
一方面我是作为工程师招进来的，却要做售前、售后、客服的工作；
另一方面由于我平常写代码写的最多，也很好说话，
并不是 Leader 的我充当着实质上的项目经理的角色。
当时有次周六凌晨三点，刚处理完事情的我发现CS同事二狗也在线，
我问他在干什么，他说周六我们的餐饮客户搞活动，他还要录十几个营销活动…
当然，别看我说的这么崩溃，其实我心里非常愿意呢。
假如一家公司是做企业级服务的，那么只要这家公司想要变得卓越，“客户第一”就一定在公司的核心价值观里。
之前《最近跟女朋友的周常》里也讲到了，“客户第一”是需要公司跟员工一起努力达成的。
所以虽然我一开始奉献出了周末（忙的时候连一周一休都做不到）
但随着操作手册的建立、流程的规范还有持续的功能更新，
后面的事情越来越顺畅了。
这件事情给我的附加感受是，
我真正地体会到了从开发者、项目管理者、用户的不同角度去看一件事情的全貌。
而且我确认了一个事实：
多方合作中，是能找到共赢点的。
只要想明白了这个点，事情就一定可以迎刃而解。</description>
    </item>
    
    <item>
      <title>回首看向2018年的OKR</title>
      <link>https://liriansu.com/posts/2019-01-22-my-2018-okr-review/</link>
      <pubDate>Tue, 22 Jan 2019 22:07:02 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-01-22-my-2018-okr-review/</guid>
      <description>去年默默践行了一年的个人 OKR,
今年年初也是到了回顾的时候了。
 引子 去年写《这就是我2018年的OKR》的时候，
我刚处于一个从各类渠道学到了这个技巧的兴奋期，
所以非常激动地设下了（自以为）很精妙的几个小目标。
一年下来，我收获不小。
其中感触最深的一点是坚持自我审视对个人成长的有效帮助，
或者换一句话说，叫“坚持的力量”。
OKR 这种东西，就像小学生对以后职业的幻想一样，
是即美好又容易幻灭的东西。
最关键的并不是目标是怎么定的，
而是定目标的人是如何去认知他的目标的。
举个栗子，我给自己定下的年度目标有一条是“帮助陌生人 50 次”。
这点让我在路上走路都走不安稳了，一直左顾右盼看看有没有哪个人需要天降帮助的。
（最终顺带完成了不少把垃圾捡起来丢到垃圾桶里的普通成就）
回顾 去年定下的 OKR 是这样的：
 O1. 技术影响力大幅度提升
 学习/理解/使用/掌握6个技术工具
 成为1k+ star项目的主contributor
 技术文章输出20篇
 自己有233 star以上的代码项目
  O2. 事业上做出极大贡献
 团队的OKR完成率在80%以上
 review 10万行代码
 当300场面试官
 成为整个团队top 1%的人
  O3. 保持幸福度爆满的状态
 与亲人总语音时间超过1000分钟
 跟女朋友争吵次数小于3次
 帮助陌生人达50人次
 新增500首红心歌曲
   很简单，分三点来看就行了。
技术影响力 技术影响力这点上，其实跟我设想的方向有很大出入，</description>
    </item>
    
    <item>
      <title>如何搭建个人的舒适工作环境 —— 又名 Surface Pro 使用感言</title>
      <link>https://liriansu.com/posts/2018-12-04-dev-env/</link>
      <pubDate>Tue, 04 Dec 2018 23:16:29 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-12-04-dev-env/</guid>
      <description>首先感谢 Mia 在预算见底的年底，
卖掉了 iPhone 给我补上了款项…
 这篇文章大概会涉及三个方面：
 Surface Pro 体验
 我的开发环境硬件搭配
 我的开发环境软件搭配
  Surface Pro 体验 我以前B站就逛逛动画区跟鬼畜区，
前几个月开始逛科技区跟生活区以后，
草单就像猫刨过的卫生纸一样疯狂变长。
在很多件很有科技感的物件中，
我看中了 Surface Pro。
&amp;gt; 码字时的桌面一览
Surface Pro 是微软出的一款平板电脑。
我看中的是 Surface Pro 6，
硬件参数是 512GB SSD 硬盘 + 16G 内存 + 8代4核i7 CPU (i7-8650U)，没有独立显卡，没有风扇，
除了支持触屏以外，身上的接口包括一个音频口、一个雷电2（兼容 miniDP）接口、一个 USB 3.0 接口、一个 Surface Connect 充电口。
国行官方售价是裸机 14888 RMB，
图里的键盘售价是 788 RMB,
粘在屏幕左边的触控笔是 728 RMB.
上面数据有点冷冰冰的，
让我们举些具体的栗子：
 机身很轻。机身重量是 700g, 背在书包里感觉仅等于背着半本《算法导论》。</description>
    </item>
    
    <item>
      <title>技术人员要怎么选择自己的职业发展道路</title>
      <link>https://liriansu.com/posts/2018-10-25-company-stategy/</link>
      <pubDate>Thu, 25 Oct 2018 23:35:26 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-10-25-company-stategy/</guid>
      <description>这篇文章的灵感来自于最近的一次跟好友聊天。
  临近毕业的时候，我要找工作了。
但是当时的我其实非常懵逼：
 我没有职业发展规划，我甚至连我想进什么样的公司都没偏好（反正我只能写代码）
 就算我有偏好（比如钱多事少离家近），我也不知道哪个公司符合我的偏好
 即使我知道有这样的公司（比如我想象中的谷歌），我也不一定能进
 网上/生活里别人关于职业发展的说法五花八门（比如写代码是吃青春饭），甚至还互相冲突
  于是我秉承着车到山前必有路的快乐心态，
去了第一家给我发 offer 的公司。
（结果工作出人预料地鱼块，详情参见《前文》）
如今的我再回头去审视这种青涩的想法，
我最大的感慨是：
信息量的多寡，的确是决策好坏的决定性因素啊。
我觉得当时我的懵逼是完全正常，
而且我的决策机制（去第一家合适的）也是没有大问题的。
因为我现在是这么想的：
 没有最佳策略，只有你最赞赏的策略
 不仅要靠自我奋斗，还要考虑到历史的进程
 目标往往不是一开始就定死的，而是要不断更新的
  没有最佳策略 人在面对选择题的时候，
总想找出正确答案。
但不是所有选择都是选择题，
总有选择是没有标准答案的，
这个时候人就会想选C。
比如职业相关的话题，
总会出现这一类问题：
“是去大厂比较好？还是去创业型公司？”
的确，在信息量不足的情况下，
这种问题是非常难以回答的。
Richard Liu 有一篇写的蛮好的文章《职场抉择：我适合大公司，独角兽，还是幼角兽？》就是讲这个话题的。
这几种公司的优点代表了不同的策略：
 创业公司：机会极多，非常自由，事情做成的话成就感巨高。适合适应能力强，想独当一面的人。
 独角兽：未来可期，各方面都比较优秀，团队水平会比较高。适合业务能力突出，想快速成功的人。
 大厂：发展稳定，社会影响力大，工作不会侵占过多个人生活。适合在意公私平衡，想稳定工作的人。
  比如有朋友跟我聊过他的跳槽策略，
就是挑着C轮/D轮的独角兽公司去，
只要趋势不变的话，
一两年公司就可以上市，
然后再过两三年期权就可以套现。
这样他就可以用他优秀的工作技能，
获得不错的报酬。
不过我个人来说不会选择这样的策略。
我认为人类的事业感受可以分为这么六个方面：
 报酬：劳动获取的劳动等价物（钱）是否满意？</description>
    </item>
    
    <item>
      <title>2018 QCon 第一天早上参会有感</title>
      <link>https://liriansu.com/posts/2018-10-18-qcon-2018-shanghai/</link>
      <pubDate>Thu, 18 Oct 2018 18:54:24 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-10-18-qcon-2018-shanghai/</guid>
      <description>其实这次的 QCon 一共有三天，
但是我只去了半天。
 前几个月 QCon 临近，
老大豪气干云地一挥：
“今年我们买票去听 QCon！”
于是我们非常开心地到网站上一看，
一张票几千人民币…
……
预算不多的我们只能在力所能及的范围内买一些票，
然后把每张票拆成好几块，
让尽可能多的同学都去感受一下“全球软件开发大会”的氛围。
（QCon 的中文名真的是叫这个！）
这次我就去听了个早上，
在主会场彭蕾/臧秀涛致辞以后，
听了三场讲师的分享。
Java API Design Best Practices 第一场本来是个老外讲 Go 的，
但好像路上堵车没能来得及到会场，
所以临时换了个讲 Java 的老外。
这位老哥叫 Jonathan，
呆的公司一路是 Sun/Oracle/Microsoft，
介绍完自己以后，
PPT 突然切到了 ,
然后 Jonathan 吹了一波：
“这可是写 Java 的程序员都必看的一本书！”
然后话题逐渐切入正轨，Jonathan 提出了好的 API 会有的几个特质：
 易懂的 (Understandable)
 稳定的 (Consistent)
 合适的 (Fit for purpose)
 文档好 (Well documented)
 节制的 (Restrained)</description>
    </item>
    
    <item>
      <title>优雅的 Python 接口设计</title>
      <link>https://liriansu.com/posts/2018-09-21-api-design-in-python/</link>
      <pubDate>Fri, 21 Sep 2018 20:57:46 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-09-21-api-design-in-python/</guid>
      <description>今天跟@hulucc 日常写码吹比，
讲到了选第三方库的原则说：
“我其实发现我现在选库不太 care 他源码是怎么实现的，
但是我非常喜欢那些 api 设计得巨科学的库。”
 科学的 API API 设计的科学大概是什么样的呢？
比如举一个有名的例子就是 requests 这个库。
 Requests is one of the most downloaded Python packages of all time,
pulling in over 11,000,000 downloads every month.
 这个库的 API 用起来大概是这样的：
&amp;gt;&amp;gt;&amp;gt; response = requests.get(&#39;https://api.github.com/user&#39;, auth=(&#39;user&#39;, &#39;pass&#39;)) &amp;gt;&amp;gt;&amp;gt; response.status_code 200 &amp;gt;&amp;gt;&amp;gt; response.headers[&#39;content-type&#39;] &#39;application/json; charset=utf8&#39; &amp;gt;&amp;gt;&amp;gt; response.encoding &#39;utf-8&#39; &amp;gt;&amp;gt;&amp;gt; response.raise_for_status()  这里设计的所有 Python 程序语言都是见文知意的英文人类语言，
requests.get 中的 requests 不仅是包名，
还化身成了代码语义的一部分。
返回的 response 就是一个典型的 HTTP 协议对象，</description>
    </item>
    
    <item>
      <title>毕业三年的报告</title>
      <link>https://liriansu.com/posts/2018-09-09-adult-life/</link>
      <pubDate>Sun, 09 Sep 2018 19:46:37 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-09-09-adult-life/</guid>
      <description>前阵子在知乎上看到一个问题，
叫《读研三年与工作三年的人有哪些差别》。
我的思绪突然被唤醒了：
对哦，原来我已经毕业了三年了。
  注意，本文有一万字，可能要读个半小时？
 我跟小米娅的工作习惯都比较类似，
前阵子闲聊的时候我们算了一下：
正常的朝九晚六加双休，
一周是工作 40 小时；
不过因为我们两个人基本上下班以后还会看工作相关的事情，
平均下来工作日会多工作 2 小时，
周末还会有一天干职业相关的事情，
所以满打满算可以说一周工作 60 小时。
嚯。也就是说我们工作两年，就有四年工作经验了。
赚翻了耶。
当然了，这个工作经验 buff 只是说着玩的。
认真地说，要算工作经验的话，
我更愿意从 2014年7月7日 算起，
那是作为实习生的我第一份工作的 First Day（定语真多）。
实习 通勤 我们大学的设定是大四一年是给你实习的，
然后我因为硬学习成绩不算好，
考不动研也想早点致用，
所以抱着找一份实习工作，
然后毕业以后转正成为正式工的想法。
当时 QAD(一家美资跨国软件公司) 跑来学校校招，
我就去参加了面试。
面试的流程是笔试 + 群面 + 单面，
跟 NIMO (交大网管部) 的面试流程极为相似。
所以我熟练地就通过了。（并没有）
我其实填完了姓名和手机就愣住了，
因为第三个空叫“目标职位”，
有 SE, QA 和 BA 个选项可以勾选。
我便举手问了负责发试卷的 HR 小姐姐 Gloria，
Gloria 跟我说你软件学院的就填 SE 吧，</description>
    </item>
    
    <item>
      <title>公司文化、工资期权、开发体验——一线程序员的喜怒哀乐</title>
      <link>https://liriansu.com/posts/2018-08-11-a-chat-with-schoolmates/</link>
      <pubDate>Sat, 11 Aug 2018 23:55:50 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-08-11-a-chat-with-schoolmates/</guid>
      <description>我有一群中学时学计算机奥赛的最好的朋友，
毕业以后我们散落在各个公司写码，
大家心照不宣地约定着“分开打钱，有事TP”，
时不时地就会聚在一起吃个饭。
  Disclaimer:
本文内容涉及大量个人感想，
记忆内容有模糊，
一切内容真实性不保证，
有任何问题由作者本人背锅。（没错就是他，快喷）
 （一）友情 Mia 有空的时候也会参加我们的季度聚会，
她和 YJ 的女朋友阿张是我们一堆男生聚会时的唯二妹子。
除了感慨：“程序员的手是好看啊。”
Mia 跟我也感慨过：
“我觉得你们这样真的很难得。
从初一初二就认识，
然后之后一直保持联系，
毕业以后也从事着一样的行业。
我觉得你们之间充满了共同话题。”
“对啊，日漫里面这就叫命运的羁绊。”
我们一帮队友里，
有毕业去了谷歌英国，如今已经找到真爱的队友；
也有毕业进华为，一直在出国的单身队友；
有一路深造还在读书的队友，
还有先后从微软、网易、依图跳入拼多多怀抱的队友们。
大部分时候我们会找个粤菜馆子吃点上海肠粉，
用来下饭的话题会从忍者村大战3v3经典对决，
聊到广东回南天和上海梅雨天的气候差别。
这次的聚会发起于刚从国外出差回来的华为小员工 enye。
就像以前的宿舍吹比一样，
这次的聊天吹比也让我颇有想法。
（二） 公司文化 我们问 enye 他这次休息几天，
enye 说他请的三四天年假，可以休息九天。
众人：？？？啥操作？？？
enye 解释道华为有个约定，
就是出国回来默认有一天可以倒时差，
他就顺势请了一波连起来的假，以玩代休了。
enye 又讲到他其实有过想跳槽，
大家问起原因，
enye 感慨道：“我存不下钱啊。”
因为工作性质，enye 要走遍世界各个国家，
他又忍不住在知乎上关注了美食和旅行的话题，
也难怪存不住钱。
大家笑了一波他这第一世界的烦恼以后，
他又讲到：
“其实在我司，我难受的还有一种焦虑感。”
在 enye 的感受里，
华为是极度狼性文化的，
假如员工到了 35&amp;frasl;40 的年纪还没有一定成就，</description>
    </item>
    
    <item>
      <title>为什么我喜欢工程师文化</title>
      <link>https://liriansu.com/posts/2018-07-26-engineer-culture/</link>
      <pubDate>Thu, 26 Jul 2018 22:38:44 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-07-26-engineer-culture/</guid>
      <description>Mia 公司的母公司是 3G资本，
她前几天突然好奇公司的文化是怎么样的，
就去找了相关资料读了一遍。
然后 Mia 惊奇地跟我说：
“我发现 3G资本 对人才的要求特别神奇。
三个关键词是 smart, poor, desire to be rich&amp;hellip;”
空气中顿时充满了快活的笑声。
后来我又想，
我司有什么企业文化呢？
假如要我来说的话，
大概就是 工程师文化 吧。
工程师文化 看美剧的时候，
我们会发现美国人一楼总有一个车库，
车库的工具箱里装着各种各样祖传的实用工具，
Mickey/Rick/Baymax 都是从车库里走出来的。
软件工程师的工程师文化跟这个场景也很像：
- 在实践中学习
- 用工具解决问题
- 自主决策
我很喜欢这样的工程师文化。
具体来说，
我们举一个B轮公司的研发部门为例子，
也就是我目前在的公司：
再惠（上海）网络科技有限公司。
在实践中学习 我司有一份文档，
叫 the Hitchhiker&#39;s Guide to ZaiHui Dev，
俗称“新手村任务”，
这个文档大概长这样子：
文档里的章节包括搭建开发环境、
熟悉基础业务、参与合作流程、认识基础架构、
还有名为 DLC 的包括权限、队友、小脚本等附录。
除了这一套完善的文档以外，
每个人还配有一名 buddy，
就像老刺客带新刺客一样，
新同学在万物皆虚万事皆允的路上不管有任何问题，
都是可以抓着 buddy 问个透彻的。
比如其中后端的新手村任务大概长这样子（节选）：</description>
    </item>
    
    <item>
      <title>最近跟女朋友的周常</title>
      <link>https://liriansu.com/posts/2018-06-05-weekly-wander/</link>
      <pubDate>Tue, 05 Jun 2018 00:22:48 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-06-05-weekly-wander/</guid>
      <description>最近因为加班有点多，
经常打断二人世界，
导致女朋友有点不开心。
 （一）
前几个月的时候周常去觅食，
去的店家是港式风格装修的。
米娅正很开心地跟我讨论着墙纸上的 sasa 店面，
我眼角瞥见了桌上有一张二维码。
“哇你看，他们家也有微信点餐。
我这几个月加班都在做这个！
你等我下我拍照发群里，
看看人家做的跟我们做的体验相比如何…”
顿时米娅跟我聊天的兴致全无了。
上周末的时候，
吃饭过程中又接了个语音，
然后我跟米娅说，
吃完饭我下午要去公司。
米娅就很好奇地问了我一句：
“你们公司出 bug 都是你修吗？”
我安慰米娅说：
“有些别的同事也要周末修 bug 的啦。”
（二）
第二天晚上跟米娅吃完饭出去散步消食，
不知不觉又聊到了加班这个话题。
出于“爱一个人就想跟他分享全部”的道理，
我不禁又跟米娅喋喋不休我的工作起来。
“我跟你说，我感觉每个人的属性真的是不一样的。”
米娅捧哏：“嗯？”
“比如说我们公司吧。
因为工作制度是 965 + 弹性时间，
所以每个人的方差其实很大。
有些同事就是按时上班按时下班好好工作，
也有些同事跟我一样就是加班划水。”
“噢，也就是说你们真的有人是不加班的咯？”
“对啊当然。
你看加班这个属性，
其实不是跟公司绑定的而是跟我绑定的，
我在 QAD 不也晚上洗完澡回去干活么…”
“噢…”
（三）
不过讲到这个，
我又想起上次看到的一个很好玩的说法：
“离职爆破半径。”
于是我想办法用人话跟米娅 demo 了一下：
“虽然说每个人都是平等的，
但人和人之间真的差别还是蛮大的。”
“怎么讲？”
“比如说你看我们现在几十个人，
少几个人好像没啥问题。
但其实我拍脑袋可以数出几个人，
只要他们一瞬间全部离职，
我们的事情就会崩。”
“啊？为什么啊。”
“因为我们目前很多事情其实不是靠制度在维护的，
真的是靠优秀的人在顶着。
而且因为这些人太优秀了，</description>
    </item>
    
    <item>
      <title>我的一点强迫症</title>
      <link>https://liriansu.com/posts/2018-05-07-my-coding-ocd/</link>
      <pubDate>Mon, 07 May 2018 22:07:44 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-05-07-my-coding-ocd/</guid>
      <description>每个程序员都有他自己的强迫症。
一旦被戳中了，
就不禁心里暗暗会喊一声“舒服”。
 正确使用空格  有研究显示，
打字的时候不喜欢在中文和英文之间加空格的人，
感情路都走得很辛苦，
有七成的比例会在 34 岁的时候跟自己不爱的人结婚，
而其余的三成最后只能把遗产留给自己的猫。
毕竟爱情跟书写都需要适时地留白。
 vinta/pangu.js
   现代社会的程序员总是要接触英文，
而很多时候我们会在中文中夹杂英文。
这种时候假如见到不留白的字我就会很难受：
错误：我今天带GF去吃了KFC的嫩牛五方。 正确：我今天带 GF 去吃了 KFC 的嫩牛五方。  正确使用全半角符号 当时在微信公众号的文档 JSON 样例数据里，
发现了全角双引号的我，
就像初中时回宿舍路上，
在马路中央见到了一直死老鼠的阿锋一样惊恐。
中文使用全角符号，
英文使用半角符号并留白，
连接处使用全角符号。
错误：你们搞信息竞赛(OI)的有句话叫&amp;quot;code is cheap，show me your boyfriend。&amp;quot; 正确：你们搞信息竞赛（OI）的有句话叫“code is cheap, show me your boyfriend.”  文本文件以换行符结尾 No newline at end of file 这句话就像是“你房间没锁门”一样令人惊悚。
不过专业地说，
在 POSIX 标准里行的定义是：
 3.206 Line
A sequence of zero or more non-&amp;lt;newline&amp;gt; characters plus a terminating &amp;lt;newline&amp;gt; character.</description>
    </item>
    
    <item>
      <title>如何带节奏</title>
      <link>https://liriansu.com/posts/2018-04-13-make-your-impact/</link>
      <pubDate>Fri, 13 Apr 2018 22:44:45 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-04-13-make-your-impact/</guid>
      <description>3月份我司周常分享轮到我的时候，
我讲了这个话题。
就像学好了“meta编程”就可以编的一手好程序，
我想着假如大家能掌握“meta分享”的技巧，
那日后我们的内部分享便会是盛宴不断了。
本文语气更贴近 presentation,
文学性会欠缺一些。
 背景 今天的主题是“如何带节奏”，
我们也可以说“如何说服一个团体”，
或者叫“如何增加你的影响力”。
所以很显然，
这次我要讲的东西很虚，
基本上全部都是鸡汤。
关于鸡汤类的文章/分享，
有一句话，叫：
 甲之砒霜，乙之蜜糖
 这句话出处我没太找到，
大概就是评价杨玉环的。
说到杨贵妃，古典四大美人之一，
她对于皇帝来说就是蜜糖，
但是对于劳苦大众来说就是砒霜。
这句话你也可以管它叫“千人千面”、“萝卜青菜”、“哈姆雷特和林黛玉”，
意思都是一样的。
 朝闻道，夕死可矣
 这句话意思其实就等同于“纸上得来终觉浅”。
很多时候我们看文章、听分享得来的道理，
觉得蛮普通的。
等到真正践行的时候，
会发现这个道理的确科学啊。
回到这句话，
意思就是你今天早上听了这个分享，
到晚上你就会发出“すごい”的感慨。
（众人愣，后笑）
 喜欢就会放肆，但爱就会克制
 这句话出自韩寒的《后会无期》，
他前阵子发了条微博：
大概我今天讲的也会是这样的。
所谓“古来圣贤皆寂寞，惟有饮者留其名”。
虽然我觉得今天讲的是我的肺腑之言，
但大家也就选自己信的部分听就行了。
理论 好了，背景介绍完了。
我们来讲“如何带节奏”的理论。
光是理论很干涩啊，
我们来想一个例子：
你在玩一个网络游戏（比如山口山），
你加入了一个很强大的组织（比如全服第一的阴阳寮），
你想在里面的主力阵容里有一席之地，
甚至最后可以带团，
那你应该怎么做呢？
大概的大纲是下面的四步：
 打入内部
 建立人设
 注意技巧
 不忘初心
  打入内部 首先世界上每个组织都有自己一套的行为方式，</description>
    </item>
    
    <item>
      <title>破案·Sentry迷云</title>
      <link>https://liriansu.com/posts/2018-03-22-solve-a-sentry-case/</link>
      <pubDate>Thu, 22 Mar 2018 20:14:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-03-22-solve-a-sentry-case/</guid>
      <description>作为程序员，
日常开发中经常会出现一些“不科学”的事情，
这种时候也是“破案”的好时机：
让我们来用科学，解释不科学。
 起 又是平凡的一天，
坐成一排的程序员们正在噼里啪啦地写代码。
不知不觉间 deadline 逼近了，
想到这点，
大家不禁紧张地噼里啪啦地写代码。
突然，旭总眉头一皱，发现事情并不简单：
“我总感觉这几天 Sentry 的响应速度变慢了。”
 Sentry, 英文单词直译是哨兵（漫威宇宙里最强者之一）。
也是一个非常好用的异常监控/收集/管理软件，
官网可以参见 sentry.io
我司用 Sentry 做了各端的错误收集，
大家养成了一出错先看 Sentry 堆栈分锅的习惯。
 于是紫月就例行公事地看了一眼 Sentry Stats,
紫月觉得事情很简单：
“拉总你看看你的推送啊！”
 拉总，绰号来源于 ID: lxkaka.
因为跟我们支付供应商拉卡拉 (lakala) 巨像而得名。
拉总在我司做后端，
负责过会员数据、平台监控、推送系统的实现。
 跑过来看着紫月屏幕里 Sentry Stats 的数据，
拉总感到一脸懵逼：
“不应该啊，推送系统怎么能报这么多错呢？”
承 回到座位的拉总研究了一会儿，
惊呼道：
“我们是不是换过测试环境的 MongoDB 地址啊？”
旭总一脸鄙视：
“没换，要换也是两个月以前换的。”
紫月笑着调戏拉总：
“不会你的代码跪了两个月才发现吧？”
拉总赶快说：
“不可能不可能，我再看看。”
过了十分钟，
拉总二脸懵逼地站起来了，
十分迷惑地 Pub 了一句：
“这不科学啊，测试环境是好的啊。”</description>
    </item>
    
    <item>
      <title>链家小哥问我：听说搞IT的培训三个月就可以月入上万，是真的吗？</title>
      <link>https://liriansu.com/posts/2018-03-12-is-it-possible-to-be-rich-easily-by-programming/</link>
      <pubDate>Mon, 12 Mar 2018 23:22:10 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-03-12-is-it-possible-to-be-rich-easily-by-programming/</guid>
      <description>我想了想，
说：
是的。
 （一）
前几天跟女朋友去租房子，
因为我们一对情侣租的是两居室，
链家小哥自然就问一居室的考不考虑。
本着知道业务需求，
才能实现的更好的原则，
我就跟他说了下我是程序员，
有的时候晚上想工作到比较晚，
作息上会跟女朋友错开，
所以会住两居室的原因。
小哥听说我是程序员以后很好奇，
问：“你们程序员是干什么的啊？”
我想了想，跟他说：
“比如你们上传房间照片用的网站，
就是你们程序员开发的。
比如你手机上的App时不时要更新，
这些也是程序员做的。
比如微信、王者荣耀、或者说你手机系统，
都是程序员做的。”
小哥更好奇了：
“那你们这算是搞IT的咯。
我听我朋友说，
你们搞IT的，
培训三个月，
就可以找到月收入一万的工作，
是真的吗？”
（二）
小哥看我一脸懵逼的样子，
他就跟我说：
“年后我接待的客户全部都是搞IT的。
前阵子有个湖南那边的应届生来上海，
两个人租了九千块钱的房子。
刚过完年的时候，
也是有一对情侣，
男的比女的大不少，
也是搞IT的，
两个人也是租了七、八千。
前阵子还有一个客户，
一个人租了五千，
刚租了一个月，
（押金都不要了）
就去了杭州阿里巴巴那边上班…”
我：“呃。。。”
=_=
我想了想，
看小哥这么好奇的样子，
也出于我跟小哥交换行业知识，
小哥说不定也会跟我说怎么租房子便宜的私心，
我认真地解释道：
“你说的，培训三个月，
月入上万是肯定有几率存在的情况。
我们这行可能会被叫做“搞IT的”，
这其实是一个很大的职业范围，
这里会有各种各样的情况。
比如可能是有些有钱的企业在搞信息化，
这样的企业缺乏的不是技术上多么专业的人才，
而是各方面都很优秀的人。
有可能你本来跟人沟通啊、合作意识啊、业务能力啊都很不错，
然后你去认真参加了一个培训，
你获得了“搞IT”这项技能，
就像参加了英语培训、参加了挖掘机培训一个道理。”
小哥想了想，
他说是这样的。
（三）
小哥说链家正在改革，
所有人都是无底薪，</description>
    </item>
    
    <item>
      <title>我的好友柳宁宁</title>
      <link>https://liriansu.com/posts/2018-03-03-my-friend-ldsink/</link>
      <pubDate>Sat, 03 Mar 2018 20:39:48 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-03-03-my-friend-ldsink/</guid>
      <description>柳宁宁真名其实不叫柳宁宁，
我帮他解释真名都是某个朝代的某个职位。
但柳宁宁的快递名都叫“柳宁宁”，
以致于我的快递名叫“柳宁宁的同桌”。
 柳宁宁和我是大学室友，
后来是工作伙伴。
因为在我司互膜文化盛行，
基本上互称不是X总X神就是X老板，
所以后来我称呼柳宁宁都是叫柳总。
硬生生地把大学几年的称呼都扭过来了，
现在我叫柳总真名反而不太适应。
柳总真名不叫柳宁宁。
不过他很喜欢柳这个姓，
于是有时需要录测试数据，
他不是录“蜜汁服务员柳宁宁”，
就是录“柳纯”。
柳总对隐私安全很重视。
柳总有一段时间把他所有不玩的账号都注销掉了，
但是有些网站没有提供注销功能（比如新浪微博），
他就很烦。
之前我在知乎上写文章经常会提到柳总的真名，
他的队友发现以后就吐槽了一波柳总，
于是柳总就拜托我把文章里的真名换成了化名。
我有些换成了柳宁宁，
有些换成了柳纯，
有些换成了ldsink。
后来柳总盯着搜索出来的五六篇文章，
感慨道：“这么多文章，简直像是女朋友…”
柳总的ID是ldsink。
GitHub/ldsink或者是ldsink.com都是柳总。
柳总说这个名字是 LinuxDeepin Sink 的缩写，
以及 Deepin 是一款很棒的 Linux 发行版，
Sink对应他的名字。
果然柳总是 Deepin 的真爱。
柳总现在基本只用Deepin。
（除了打dota2的时候）
我司程序员标配Mac电脑，
但只有8GB的默认内存和IOS的默认系统有时就不那么方便。
在柳总建议下和预算允许的范围内，
我换了一个神舟电脑+俩16G内存条，
他换了一个戴尔本子+俩8G内存条。
后来我的神舟天天蓝屏，
柳总嘿嘿一笑：“我猜是内存的原因，不如我们换一下”。
换了以后用着俩8G内存条神舟电脑的我果然不蓝屏了。
围观了事件全过程的张总惊呼：
“这就是柳总的内存转移之术！”
柳总是一个ACG御宅。
虽然广义上的说法可以介绍说柳总是动漫宅，
但其实我觉得他算是ACG Otaku，
也就是“在动画、漫画、游戏界都很沉迷的御宅族”的说法。
去年（17年）柳总发起了一波《刀剑神域：序列之争》观影活动，
同时表露了他作为松岗爱衣催婚协会会员的激动心情。
大学时期有一阵他手机铃声是石头门的OP《Hacking to the Gate》，
短信通知铃声是香菜的嘟嘟噜，
于是我总是瞅着他忘了开静音的上课时间戳他微信消息。
柳总是一个萝莉控。</description>
    </item>
    
    <item>
      <title>Git的理念</title>
      <link>https://liriansu.com/posts/2018-02-10-philosophy-of-git/</link>
      <pubDate>Sat, 10 Feb 2018 16:01:31 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-02-10-philosophy-of-git/</guid>
      <description>本文尝试介绍一下Git的过人之处。
目标读者是想了解Git，
或者对软件设计有兴趣的人。
 Git作为一个极其灵活的工具，
从修改单机游戏数据文件的版本管理，
到多人协作一起堆屎的协作开发，
使用起来都是十分趁手。
那么Git灵活的奥秘在哪呢？
大概是因为Git设计正交、实现扎实吧。
总览 Git里面的术语/命令很多，
但是它们可以归并成几个大类，
每个大类的概念都是正交的，
也就是说交叉概念很少，
不会有模糊的概念定义。
基于这样的设计，
Git与之对应地实现了一套扎实的命令系统。
 Git里的概念有些难以准确翻译，
本文涉及概念词的地方尽量用术语表达 。
 比如经常用到的概念会有这些：
 Line Diff
 Commit
 Branch
 Repository
 Remote
  Line Diff Git实现版本控制的方法是根据Line Diff，
推算出每个Commit具体改了哪些东西，
然后用多个Commit（实则是多份Line Diff）构建出所有历史。
这个基于Line Diff的先天设计决定了Git的一些特性：
 可以存储所有历史。
我们常听到“Git是一个分布式的版本控制系统”，
这个指的就是Git不需要中心化的服务器，
你就可以做完所有操作。
因为本地存着所有的Line Diff，
所以“查看昨天被改过的文件名列表”这个操作完全可以离线完成。
 对二进制文件不友善。
二进制文件是没法强行比Line Diff的。
所以假如用Git管理二进制文件，
Git只会显示一个Binary File Differ。
再把上面一条“存储所有历史”给叠加上，
就会出现今天提交了一个200M的文件，
明天后天我都修改覆盖了这个文件，
最后整个目录就有600M大了…
（也就是说一般不用Git来管理二进制大文件）
 能检测文件重命名。</description>
    </item>
    
    <item>
      <title>这就是我2018年的OKR</title>
      <link>https://liriansu.com/posts/2018-01-25-my-2018-okr/</link>
      <pubDate>Thu, 25 Jan 2018 23:27:28 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-01-25-my-2018-okr/</guid>
      <description>前阵子听了一位老师关于OKR很详尽的讲解，
受益匪浅。
 引子 当时老师开题的时候，
举了“打地鼠”和“灭火”当例子。
以下是经过回忆加工的原话：
 假如让你想一想，
去年一整年你做的三件最主要的事情是什么，
你能数的起来吗？
很多人是数不起来的。
因为很多时候没有目标，没有计划，
我们做事情就容易像打地鼠一样：
一会儿冒出来这个事情，很紧急，就先做这个；
又一会儿冒出来那个事情，很有前途，又做那个。
或者换个比喻，
假如我们要穿过一片到处都着火的地方，
才能到达目的地。
那其实只要规划好了，
我们只要扑灭我们路途上的火就行了。
其他烧着的火呢？
烧就让它烧吧。
 （当时这段话产品经理小鱼表示感触很深，学到了）
通过这个小故事，
其实就想说明定目标本身是很有意义的。
那具体目标怎么定呢？
当然就是OKR了。
OKR 其实上次跟小米娅聊天的时候，
就学到了OKR相关的知识。
这次听老师又讲了一遍，
对两部分印象很深刻。
一部分是OKR本身的特性：
OKR 全称是 Objectives and Key Results （目标和关键结果）
可以对标 KPI (Key Performance Indicator - 关键绩效指标)
KPI会直接跟绩效考核挂钩，
而OKR一定不直接跟绩效考核挂钩。
当时讲到这里，
我听到了一句受震撼很大的话：
工作的奖赏就是工作本身
这种就属于我明白，
但是以前没能用语文直白表达出来，
结果被别人抢先说出来的道理。
很科学。
印象很深刻的第二部分是OKR的特性：
 目标 (O) 要是一定时间内，定性的，鼓舞人心的，可以达成的。
 关键结果 (KR) 要是定量的，陈述事实的，有挑战性的。
  呃，这个要举例子就举的多了，</description>
    </item>
    
    <item>
      <title>我的女友小米娅</title>
      <link>https://liriansu.com/posts/2018-01-13-my-little-mia/</link>
      <pubDate>Sat, 13 Jan 2018 08:06:16 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-01-13-my-little-mia/</guid>
      <description>小米娅本名叫吴莹莹，
不过她很喜欢Mia这个英文名和对应的中文名米娅。
不过注册微信公众号的时候，
“小米娅”已经被注册了，
于是最后纠结了好一会儿，
她选择了“一只米娅”这个听起来很精灵的名字。
 认识小米娅的契机是因为我们一个公司，
她当HR，
所有人都认识HR。
印象中的小米娅就是身着深色系衣服，
气质高冷，
讲话信息量很高，
有种魔道中人的感觉。
公司要选年会主持人，
惯例是抓两个在职员工和两个实习生。
还是实习生的小米娅和我便被抓了壮丁。
由于要一起对串词，
得想办法活跃气氛，
我就有合适的理由讲一大坨电波系的冷笑话。
小米娅听了以后问：
这笑点在哪？
……
后来我发现小米娅和我是下班顺路的。
我回交大要两小时地铁，
她回华理也要一小时地铁。
于是那之后每天下班，
HR办公室门口就站了一个我&amp;hellip;
有的时候小米娅会提很重的包下班，
（很直男的）我觉得女人都是弱鸡，
就想抢着帮她提。
小米娅都很礼貌地拒绝了我，
并顺便教了我一个道理：
女生的包，很多时候是整体搭配的装饰，
不可以因为大男子主义作祟而抢包哦。
小米娅的idol是林志炫，
而且小米娅会真的去追星，
不过小米娅心中，
林志炫作为老一辈艺术家，
她追星的心态更多是敬仰之情。
作为新垣结衣老公之一的我自愧不如。
小米娅人生唯一一次提前交卷，
就是为了去赶火车，
为了去听林志炫的演唱会。
演唱会结束以后小米娅和几个粉丝杀到了林志炫的酒店，
在大家一起拍合照的环节，
身材纤细的小米娅硬是挤到了第一排，
挽住了林志炫的手臂，
留下了一张小米娅跟她idol最亲密的照片。
小米娅自豪地把照片给我看，
我看着上面她一头红发惊呆了：
“你那时候怎么这么杀马特？”
“哦，大学的时候想染头发就去染了。”
小米娅做事有的时候很随性，
我很喜欢。
上周我们在家吃饭，
讲到洗碗真特么麻烦，
突然灵感一闪：
“饭堂用的铁盘子洗起来很方便！”
“那个沃尔玛有卖！”
于是我们决定就用饭堂铁盘子吃饭了。
可能以后朋友圈晒厨艺的时候，
会有点怪。
说回杀马特。
小米娅染了红发以后去初中接她妹妹放学，
她妹妹的同学都惊呆了。
她妹妹倒是很淡定：
“我姐真帅！”
不过后来小米娅要实习面试了，
为了稳妥，头发还是染了回来。</description>
    </item>
    
    <item>
      <title>我是怎么实现《用弹幕玩GBA游戏》的</title>
      <link>https://liriansu.com/posts/2018-01-06-play-gba-with-danmaku/</link>
      <pubDate>Sat, 06 Jan 2018 18:58:33 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-01-06-play-gba-with-danmaku/</guid>
      <description>大概是大二的时候，
我在TwitchTV上看到了一个极其精彩的Idea。
 背景 TwitchTV是外国的一个主要做游戏直播网站，
观众可以打开网页观看游戏直播，
每个人都能随时发弹幕表达自己的想法。
弹幕是啥？
依赖于发弹幕万人同屏的这个设定，
TwitchTV做了一个很好玩的功能，
就是“几千人玩操纵同一个角色，玩同一个游戏。”
详情可以参见Twitch Plays Pokemon这个维基词条
当时看到这个消息，
我也去玩了一下，
感受是：特别好玩！！！
几千个人同屏玩游戏的话，
最大的感受就是混乱，
这也是最棒的体验。
大部分玩家是冲着通关的目标去玩的，
所以总体看来，角色的行为是有目标性的。
但是也会有一部分玩家以捣乱为乐，
在一些精细操作的时候（比如收服Pokemon的时候）
就会额外混乱。
最终整个游戏（或者说社会实验）在混乱中前行，
经过了16个日夜，
最终打过了四大天王，
完成了通关壮举。
OK，前面都是背景介绍，
那么看到这么好玩的一个东西，
我的心痒了很久：
我也想实现一个类似的功能！
实现 就像把大象塞冰箱里需要拆解步骤，
为了实现“用弹幕玩同屏GBA游戏”这一点，
我们主要要做的事情有如下几点：
 申请一个直播间
 获取直播间的弹幕
 实现从弹幕到键位的映射
 用程序操纵GBA模拟器
  当然，我们这个拆分非常的粗略，
而且会有很多具体的问题，
我们一个一个地来看。
申请一个直播间 我要没记错的话（_懒得去查资料验证了_）
TwitchTV的同屏玩游戏功能应该是官方实现的，
不是某一个主播或者是我这样的第三方程序员实现的。
平台自己实现的话会有非常多的自主权，
而且可以给到游戏本身的推广，
一波活动推出去不论是效果还是效果都会更好。
但是毕竟人微言轻，
我们普通人类还是要从头开始，
从申请直播间开始。
申请直播间的话主要是涉及到直播平台的选择，
因为我一直都是A/B站用户，
所以直播平台基本上就是斗鱼（A站生放送）和B站直播之间选一个。
最终我两年前注册了一个斗鱼直播间
（打个广告，从来不播的直播间：douyu.com/lisp）
第一步算是做完了。
获取直播间的弹幕 这个是个非常interesting的问题。
首先他受前置问题的影响，</description>
    </item>
    
    <item>
      <title>一种简单的鉴权方式：JWT</title>
      <link>https://liriansu.com/posts/2017-12-09-jwt/</link>
      <pubDate>Sat, 09 Dec 2017 20:07:17 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-12-09-jwt/</guid>
      <description>这是一篇关于 JWT(JSON Web Token) 的简短介绍。
 什么是JWT JWT, 全称是JSON Web Token，
是一种易于使用、无状态的鉴权(Authorization)方式。
简单的来说，就是
Server端把JSON数据经过加密做成token，以授权给Client端。
多说无益，上代码，举个栗子。
当Client端登录完成以后，
Server端要返回一个7天有效的token，
那么对应的Python的样例代码会是这样的：
（使用了PyJWT包：pip install pyjwt）
import time import jwt exp = int(time.time()) + 86400 * 7 # 失效时间 user = &#39;liriansu&#39; # 用户表示 key = &#39;hunter2&#39; # 密钥 payload = {&#39;exp&#39;: exp, &#39;user&#39;: user} # JSON 数据 token = jwt.encode(payload, key) print(token) # token可能会长这样子 # eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.EoKoMCjq_zGqUg5HDfqw4EN7EiG6gMjkUZle0uGJDGU   关于hunter2也有个梗：弱密码hunter2
 然后Client端每次在authorization header或者是query string里带上token。</description>
    </item>
    
    <item>
      <title>视差</title>
      <link>https://liriansu.com/posts/2017-12-04-your-own-sight/</link>
      <pubDate>Mon, 04 Dec 2017 22:29:14 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-12-04-your-own-sight/</guid>
      <description>蚍蜉和大树是很好的朋友，
蚍蜉常常站在大树头上跟大树聊天。
两只生物从诗词歌赋谈到人生理想，
无话不谈，谈了又谈，
所有的观点都无比契合。
 这一天他们看着遥远的天空，
蚍蜉不禁感慨道：“天真的蓝啊。”
出生在悬崖边上的大树一动不动，仿佛出了神：
“是啊，这天空的蓝，比海面的蓝更宁静。”
看着视野远方的海天分界线，蚍蜉也不禁感慨道：
“对啊，海洋的蓝深邃，天空的蓝给我一种忧伤的感觉。”
大树摇了摇身上的叶子：
“我倒觉得春天的时候，叶子的颜色才更忧伤。
天空的蓝给我一种生机盎然的感觉，我很向往。”
蚍蜉觉得很奇怪：
“不对呀，春天的绿叶才是生机盎然吧。”
大树笑了：
“你可不能把生物规律加到颜色感觉上，
绿色本来就是忧郁的，
尤其是春天叶子新芽的那一抹淡绿。”
蚍蜉没有说话，想了想，提了个问题：
“那大树，你能不能描述一下你眼中的绿色是什么？”
“绿色啊，就是春天万物生长时候的颜色啊。
比如绿叶衬红花，老树发绿芽，
这阵子在我们这跑来跑去的那个年轻人，
帽子也是绿的。”
“唔，我不是问绿色在现实生活中的投影。
我想知道你是怎么看绿色这种颜色本身的，
更重要的：你对这个颜色的感觉。”
大树侧着脑袋想了想，说：
“其实吧，我看到绿色，
会有种很平静，很忧伤的感觉。
就有一种我整棵树都会沉浸在绿色里，
随着我越沉越深，我整个颜色也越来越淡。
深色的绿色就会有一种特别深邃的感觉，
就像这个颜色本身就是自然赋予的，
深不见底，吞没灵魂。”
随着大树讲下去，
蚍蜉的眼神变得越来越锋利了：
“大树，我觉得，我们看到的颜色不一样。”
还沉浸在颜色感觉中的大树一愣：
“怎么不一样了？”
“我跟你讲一下我眼中的绿色吧，”
蚍蜉想了想，描述道：
“绿色给我一种生机勃发的感觉，
我指的是光看到这个颜色，
就觉得它里面蕴含着生命的能量，
看到它会感觉特别平静。
这种平静跟蓝色不一样，
蓝色是让你没有想法，
绿色会让你觉得生命本身就是这么美好，
会被温柔地环绕。”
大树仿佛意识到了什么，
缓慢地说道：
“我觉得，你描述的是蓝色。”
蚍蜉点了点头：
“对，刚才我也觉得你描述的是我眼中的蓝色。”
大树沉思了一下：
“有趣，这么看来，我们眼中的蓝绿色其实根本是反的。”
“是的。但是我看到这个颜色，我叫它绿色，
你看到这个颜色，你也叫它绿色。
完全一致。”
“对。我小时候知道这是绿色，是家人教我的，
想必你也是这么认识颜色的。
假如我们不交流对颜色本身的看法，
我们就永远不会发现我们眼中的蓝、绿色其实是非常不一样的。”
“这就是视差。
不止蓝、绿色，说不定我们眼中的世界都是非常不一样的。”
小云、庄子、惠子三个人讨论完了这个故事，</description>
    </item>
    
    <item>
      <title>Python项目自动化部署之一：举个栗子</title>
      <link>https://liriansu.com/posts/2017-11-23-python-deployment-automation-one-sample/</link>
      <pubDate>Thu, 23 Nov 2017 16:49:57 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-11-23-python-deployment-automation-one-sample/</guid>
      <description>本文主要讲述一下我司
（一个成长中的创业公司）
目前的代码发布流程用到了哪些工具。
 发布工具：Jenkins 我们用的发布工具是很多公司都在用的Jenkins。
举个栗子图，
在Jenkins Server上可以一键发布后端服务器代码：
按下 Build按钮 以后，
发生的事情如下：
 在 Jenkins服务器 上触发预先配置的 Bash脚本
 git命令获取到最新的代码版本，切换合适的分支
 执行代码风格检测和单元测试自从使用了付费版GitLab后，本功能已切换至GitLab CI了
 安全检查通过以后，使用fab命令部署代码
   发布命令：Fabric 这里的fab命令用的就是Python的Fabric库，
这个库类似ansible，
主要包含两套功能：
 本地命令集成。
这点大概跟 Java 的 ant, gradle,
或者是 JS 的 npm run 有类似功能。
都是可以把数个操作集成到一条简单的工作流命令里。
 远程ssh工具。
Fabric里基于ssh，
实现了一套方便的远程命令接口，
比如这么一段代码就可以把配置上传到远程服务器：
from fabric.api import * # NOQA # 不用试了，这里的两个都是假的domain，对应放上ssh的host/user即可 env.hosts = [&#39;www.kezaihui.com&#39;, &#39;zaihuiwebserver-814613977.cn-north-1.elb.amazonaws.com.cn&#39;] env.user = &#39;saber&#39; def update_supervisor_config(): put(&#39;./supervisor/*.conf&#39;, &#39;/etc/supervisor/conf.</description>
    </item>
    
    <item>
      <title>怎么使用搜索引擎</title>
      <link>https://liriansu.com/posts/2017-11-19-how-to-google/</link>
      <pubDate>Sun, 19 Nov 2017 21:52:07 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-11-19-how-to-google/</guid>
      <description>我就是这么用的。
 平常学习/工作过程中，
我经常提问和被提问，
有时会很惊讶地发现：
似乎我十分擅长回答别人的问题。
于是我自豪地内省了一下，
发现了“表面上擅长回答问题”的原因：
我很擅长利用搜索引擎。
于是我又灰溜溜地自省了一下，
发现了“擅长利用搜索引擎”的原因：
我掌握了一些小技巧。
我决定把这些小技巧给记下来。
熟练学习、理解、运用、掌握以后，
相信你也能成为一个优质的谷歌UI的。
不用百度，尽量用谷歌 在大陆的人类中，
使用最广的搜索引擎应该就是百度了。
但我不喜欢用百度，
一些主观的原因主要如下：
 口碑不好，可被替代。
因为种种原因（假药/推广/泄露用户信息），
百度的搜索口碑不好；
而且友商搜狗(sogou.com)也能顶替搜索功能。
那我更愿意选择口碑好的产品。
 内容更新不及时。
举个栗子，GitHub Issue里的最新内容，
百度就很少收录[CITATION NEEDED]。
而很多代码里的一些冷门报错，
收录的就更少了。
  个人来说，我推荐能访问谷歌搜索的友人，
都可以使用谷歌搜索。
虽然谷歌的中国本土化做的不一定好，
但是像“怎么判断煤气泄漏”
“大哥喝冰阔落是什么梗”
“一点点哪个味道比较好喝”都是可以搜到合适的答案的。
访问不到谷歌的大陆人类，
也可以使用必应、搜狗等代替。
我个人平常会用搜狗。
假如程序员朋友，
想了解“不用百度搜索”的更多信息，
可以读一下酷壳的倡议：《“作环保的程序员，从不用百度开始”》
找到X问题 我之前一直以为XYZ问题是个广泛使用的说法了，
没想到居然好像是我先提这个说法的。
XYZ问题的描述是“有的时候我们想解决的是X问题， 但是我们却纠结于Y问题， 最后却陷入了Z问题的陷阱里。”
归纳一下就是：找到问题的根源
比如文章里提到的打字机效果，
就是搜索X问题一个很好的例子。
再比如平常写代码会遇到的第三方库报错的问题，
程序报的错一般都比较原始：
比如channel 0: open failed: administratively prohibited这种。
有的时候看到报错，
我们会不自觉地先思考几步，
觉得可能是SSH channel遇到了权限问题，</description>
    </item>
    
    <item>
      <title>程序员之逻辑</title>
      <link>https://liriansu.com/posts/2017-10-31-programmers-logic/</link>
      <pubDate>Tue, 31 Oct 2017 22:05:35 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-10-31-programmers-logic/</guid>
      <description>我有时会突然意识过来，
写程序这件事情给我带来了深远的影响。
  利益相关：
以下皆为本人自身想法，
与广大的可爱的程序员们不一定有关。
 苏·格拉底曾经说过：
“一个人要先不断地剖析自己，
再不断地剖析自己，
最后不断地剖析自己，
他才是个伟大的人。”
 苏·格拉底：
我不是，
我没有，
别瞎说啊。（否认三连）
苏格拉底：
别乱在外国人名中间打点。
 在此，我就记录一下平常生活中的小事，
这样说不定可以窥斑见豹。
0 跟计算机打交道久了，
非常清楚程序都是按照流程来的。
所有所谓的 Bug 都是某个地方的计算机逻辑，
没有跟人类逻辑匹配上所导致的。
所以现在修 Bug 的时候，
虽然也会像以前一样高呼着“这不科学”，
但其实我心里知道，
这很科学，
而且外国古人不是说嘛：
Where there&#39;s a bug, there&#39;s a fix.
人类也是一样的。
我们做的所有决定，
所有结果，
都是由一个决策树生成的，
这棵树或深或浅。
我今天心情好，
突然坐到奶茶店里喝了一杯奶茶。
在旁边分手的小情侣，
用苹果电脑办公的小哥，
几个叽叽喳喳的大妈，
都像是钱钟书说的一样。
不过都是电台换台，
东一句西一句听得零碎，
但他们都是有自己完整的故事的。
所以看事情，
知道了来龙去脉以后，
我总忍不住感慨一句：
这很科学。
1 乌托邦世界里，
大家都很科学。
然而实际生活中，
总会有取舍。
比如 Vim vs Emacs,</description>
    </item>
    
    <item>
      <title>消逝的此刻</title>
      <link>https://liriansu.com/posts/2017-10-26-carpe-diem/</link>
      <pubDate>Thu, 26 Oct 2017 17:48:42 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-10-26-carpe-diem/</guid>
      <description>前几天 Reddit 上有个赞的很多的
Shower Thought:
 One of the most bittersweet feelings has to be
when you realise how much you&amp;rsquo;re going to miss a moment,
while you&amp;rsquo;re still living it.
 我很喜欢这个说法。
 跟女朋友聊到高中的时候，
她跟我讲过她有这么一种感觉：
“高三的时候因为学习压力重，
大家都很辛苦。
我虽然也很辛苦，
但我一点也没有不开心。
因为当时的我很清晰地知道：
这就是我的过一天少一天的高中生活了。”
真是一个很美妙，
又很轻小说的描述。
时间真奇妙。
五岁的某一天晚上，
我突然清楚了一件事情：
人类，是会死的。
在那之前，
我只是知识性地接受了这个事实，
但那天晚上，
仿佛有个打印机把这个事实印进了我心里。
巨大的恐惧包围了我。
随着时间的流逝，
那个夜晚在生命中也渐行渐远。
但随着我思考的越多，
死亡带来的孤独感就越重。
有几个坚固的事实矗立在我眼前：
 我们微不足道。
  我很喜欢 Fate系列 动画作品的一个原因就是：
它把各个年代的英雄带来到了同一个时空里，
并且把他们的观念冲突展示出来。
有一次韦伯心情低落的时候，
亚历山大大帝指着世界地图笑着跟他说：
“你看，我当时征服的世界，</description>
    </item>
    
    <item>
      <title>怎么写Bug</title>
      <link>https://liriansu.com/posts/2017-09-20-how-to-write-bugs/</link>
      <pubDate>Wed, 20 Sep 2017 19:49:38 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-09-20-how-to-write-bugs/</guid>
      <description>时至今日，
笔者已经有十年以上的写Bug经验了。
是时候给各位想写Bug但还不够熟练的同学们，
分享一些写Bug的心得了。
 概述 诚实地说，
写Bug本身并不是一件很光荣的事情。
但是写了一个很隐蔽/影响很大/看起来像是Feature的Bug，
然后再修复它，
就是一件伟大的事情了。
往往在你的行云流水般的bugfix代码下，
还能收获围观群众的666666惊呼。
总的来说，
写Bug的技巧可以分为下面几个维度：
 开发功能
 测试是懦夫的行为
 不要让外界发现Bug
 Warning? 不存在的
 复制别人的代码
 遵循历史规律，不轻易改变
 用中间状态完成功能
  培养习惯
 所有情况下都拥抱变化
 配置个性化的开发环境
 少做自动化的无用功
 同时开展多个工作
 信任他人的实现
 永远充满自信
  与人交流
 永远只实现90%的方案
 永远只实现100%的方案
 Code Review时也不解释自己的代码
 为Bug的合理性辩护
 适当指责别人写的不好
  后期维护
 当权责分明的人
 信奉无知即无罪
 分担权责到用户和运营上
 多写代码，生产力=破坏力</description>
    </item>
    
    <item>
      <title>我眼中的大佬们</title>
      <link>https://liriansu.com/posts/2017-09-16-interesting-humans/</link>
      <pubDate>Sat, 16 Sep 2017 16:07:46 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-09-16-interesting-humans/</guid>
      <description>近期有一个表情“给大佬递茶”用的蛮多的，
我理解的“大佬”的含义，
就是“三人行，必有我师焉”里的“师”一样的含义。
 最近因为在公众场合吹的牛逼多了，
有些不明真相的群众可能觉得我也是大佬。
我心有点惶恐，
于是打算给诸位介绍一下我眼中的大佬们。
 DISCLAIMER:
本文没有客观事实，都是主观观点。
假如有不恰当的地方，那都是我观点不恰当。
这些大佬基本都是我认识他，但他不认识我，
没有利益相关。
 Jeff Atwood, Stack Overflow 的创始人 在我刚开始补个人博客的有段时间里，
我单方面认识了很多大佬，
学习了非常多的博客文章，
Jeff Atwood (下称 Jeff) 的 codinghorror.com 就是其中之一。
他的 About Me 页面写的特别认真，
至少我很喜欢这种风格：
在单个页面内，
首先介绍自己，
再讲一些微不足道的经历，
最后主要讲自己的三观（世界/人生/价值）。
作为 SO founder,
Jeff 大概在业界也是知名的，
这方面我了解的不多。
不过他讲的几个事情我记得很牢：
一个是网站名称的由来，
就是《代码大全》 (Code Complete) 这本书里的小标题：
Coding Horror, 翻译成中文大概是“屎代码”的意思。
于是我也去补完了《代码大全》的中文版，
感觉虽然是有点年代的书，
但里面讲的一些程序员的劣习，
也是中枪无数。
于是看完了中文版以后，
我又很饥渴地把英文原版也学习了一遍。
还有一个就是写博客。
Jeff 曾多次讲到在他心目中，
写作是自我学习的很好的方式。
不过他自己写博客主要是想找个地方记一下好玩的事情。
陈皓，haoel, 酷壳的站长 陈皓（下称耗子叔）对自己的描述是：
 大家好，我是陈皓，</description>
    </item>
    
    <item>
      <title>什么是连字 (ligature)</title>
      <link>https://liriansu.com/posts/2017-09-13-what-is-ligature/</link>
      <pubDate>Wed, 13 Sep 2017 22:45:39 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-09-13-what-is-ligature/</guid>
      <description>或者叫“为什么PDF里拷出来的有些字会消失”，
“为什么有些字体里fi可以连在一起”，
“Fira Code是怎么做到连体符号的”
 ligature ligature，维基百科中文页是叫“合字”，其实概念意义上更接近“连字”。
正如字面意义上，连字就是连在一起的字，比如中文的连字是这样的：
 俗话说，见字如见人。
有的专家根据特总的签名，
分析说他的狂放就如同他那一横一样不羁……
 在拉丁语系中，很多时候会用到连字这一特性。
比如说德语的字母 ß 最开始其实是 ss，
拉丁字母中的 W 最开始的时候是 VV, 两个 V&amp;hellip;，
非常神奇。
而我们熟悉的音标里的 æ 这个字母，
看起来很像连字，但其实不是连字，
æ 是古英语等一系列语系里真实用到的字母。
fi与印刷体 在活字印刷盛行的时候，
人们都是用字模来印文章的。
一篇文章，
假如要用不同的字体，
那就要选用对应的不同的字模。
有些字体里面当 字母f 和 字母i 连在一起的时候，
f 的一横会跟 i 的一点撞上，导致不好排版。
所以为了方便、美观，有些字体直接会有 fi 连字的字模。
这里不论是印刷字体的连字，还是上面手写字体的连字，
都是一样的概念，都叫 ligature。
电脑字体里的 ligature 虽然说电脑字体不会有印刷字体所有的物理限制，
但有些字体的 fi 还依然保留了 ligature 的这一特性。
假如你在你的电脑字体配置页面找一找，
是可以找到相关的属性的。
基于电脑也能支持连字这个设定，
于是聪明的人就想到了可以用它来搞事！
比如有一款字体叫 Fira Code。
Fira Code 宣称自己是最适合程序员的编程语言，</description>
    </item>
    
    <item>
      <title>数据仓库解决方案 RedShift 入坑指南</title>
      <link>https://liriansu.com/posts/2017-09-08-redshift-as-data-warehouse/</link>
      <pubDate>Fri, 08 Sep 2017 22:59:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-09-08-redshift-as-data-warehouse/</guid>
      <description>最近工程师小谢遇到了一个难题，
就是手头上有千万级别的数据，
但是没有一个快糙猛的解决方案。
 提出问题  想直接看 RedShift 相关的，
请跳过前两节瞎扯淡。
直接到第三节观看。
 不像少部分优秀的可以活在彼岸的人，
可以醉心于写出完美的数据库，
在须臾间学会所有的程序语言；
世上大部分程序员都活在此岸，
他们要解决一个个特定的业务问题。
工程师小谢就很烦恼，
上次产品经理小刘提了个老酷炫的IDEA： 
“现金牛”。
观众们很过瘾，
但作为要实现功能的人，
小谢有点郁闷。
具体来说，难点在下面几个：
 数据量很大。
公司是做菜品相关的，每天记录的菜品数据非常多。
而且随着公司业务发展，菜品增速增长率也很高。
（也就是“指数级上升”）
 时间比较紧。
不像学校里的大作业，可以有一整个学期来实现到交付。
真正的需求是事情要尽可能早的完成，即使一开始不一定是完美的，
但是会更早得到外部反馈，正面/负面的评价有助于大家调整前进方向。
 质量有要求。
基于“现金牛”的这个需求交付完成以后，又会有新的需求降临到小谢的肩上。
所以这个此时的解决方案，也要解决彼时的问题。
随着业务/数据量的增大，短时间内（比如说一年），解决方案得稳定靠谱。
长时间内（比如说三年），解决方案要能拓展，至少是便于重构的。
  解决方案 上面的几个现世问题，
其实跟万千现世问题一样，
都是一个问题：如何在有限的资源下，完成既定的目标？
解决方案也都是通用的：转换资源、付出时间、更换目标。
当然，小谢明白，脱离实际例子的方法论都没有意义。
所以小谢打算整一个数据仓库 (Data Warehouse)
数据仓库，跟数据库 (DataBase) 很像，
就像军械库是放军械的地方，
车库是放车的地方，
数据仓库/数据库就是放数据的地方。
多了个仓是因为还放仓鼠
二者不同之处详细来说，
就是因为要解决的问题不一样：
数据库是要给业务提供基础保证，
数据仓库则是给面向决策的数据分析提供便利；
所以二者的设计思想也不一样：
数据库遵守范式设计，强调数据约束、一致性，读写操作都有涉及，
数据仓库则是存储大量冗余数据、统计数据，对读的优化更多。
举个栗子就是今天中午小谢去吃了四斤烤鱼（真能吃），
“四斤烤鱼”的数据存在了数据库里，是用来买单算钱的。
但“今天中午，四斤，烤鱼”这样的统计数据就存在了数据仓库里，</description>
    </item>
    
    <item>
      <title>写代码怎么偷懒？多练练</title>
      <link>https://liriansu.com/posts/2017-08-31-lazy-coding-practice/</link>
      <pubDate>Thu, 31 Aug 2017 20:25:12 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-31-lazy-coding-practice/</guid>
      <description>相比于“一门语言”，
“一门程序语言”更多时候是“一门规范”。
（当然，“语言”本身就是“规范”。）
 上次讲到了写代码想偷懒的话，
搞明白、想清楚再写是解决根源的一个办法。
但是凡人（没打错字）的需求始终不是重点，
写程序要偷懒，
最终还是在代码上偷懒的。
Best Practice 外国程序员很喜欢念叨一个词，
叫Best Practice。
比如说Java里面JSON要怎么处理，
就可以搜Java JSON Best Practice；
比如我对数据库一窍不通，
但我就是要学，
可以搜Database Best Practice；
比如我是甲方，
我不知道我自己想要什么，
我也可以搜Requirements Best Practice。
这种英文单词一般会有一个直译的中文，
叫最佳实践，
听起来巨蠢。
但是用来举例子就很好用。
我加入再惠的时候，
只写过一点Python，
代码习惯也是不加encoding，
不知道from __future__，
写print不写括号的，
所有要用到的第三方库都装在全局的site-packages下面。
来了以后我知道了virtualenv。
后来张总玩Lucene的时候我给他配了下Gradle，
并解释了一下：“这个东西很简单的，跟virtualenv是类似的概念。”
张总感慨道：
“其实学一门语言就是从这些工具开始啊，
这样才有一种我上手了的感觉啊！”
还有就像Go语言的gofmt命令，
这个命令会强制执行统一的代码风格调整，
不能配置、不能定制化、缩进统一使用Tab。
我十分痛苦，
不过也十分认可这里的思想：
“语言风格就是林黛玉哈姆雷特，千人千面。
相比于完美的风格，统一的风格更科学。”
Best Practice就是实际操作时的指南，
了解、掌握、实践Best Practice可以少些很多代码少走很多弯路，
用精妙的方法解决实际问题。
精妙的方法 按照套路，接下来应该讲一段精妙的方法。
不过小弟我没啥精妙的方法，
就只能举自身当反例了。
在写API的时候，
经常要处理URL，
处理URL实际上是字符串拼接。
比如Python里面把一个dict转换成query string格式，
我以前会这么写：
params = {&#39;name&#39;: &#39;afu&#39;, &#39;action&#39;: &#39;take a plane&#39;} query_string = &#39;&amp;amp;&#39;.</description>
    </item>
    
    <item>
      <title>写代码怎么偷懒？我想想</title>
      <link>https://liriansu.com/posts/2017-08-30-lazy-coding-thinking/</link>
      <pubDate>Wed, 30 Aug 2017 23:10:52 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-30-lazy-coding-thinking/</guid>
      <description>我真的不是因为写了Python，就在黑Perl。
 起 最近装了 wakatime 这个控件以后，
我一直忍不住好奇心去看看我平常到底有多少时间在写代码。
经过严谨的数据统计表明：
我只有25%的时间在写代码。
（按一周40小时算，
我一周只写10小时的代码=_,=）
这样不好。
于是我决定奋发图强，
在自以为沉浸地写了一周代码以后，
25%变成了33%。
于是严谨的数据统计依然表明：
我大部分的时间都在划水。
于是我放弃了挣扎，
就像苏轼朋友佛印和尚讲过的一样：
既来之，则安之 不是他说的
我很开心地想道：
“哎呀。
我就花这么一点点时间干活，
是不是说明我效率高呀？”
“不是的，只不过是因为你懒而已。”
心里的正义小人蹦了出来。
我十分开心地嘴硬道：
“对呀对呀，我就是懒。
而且就像我以前说的，
懒有那种没有建设性的懒，
还有那种一劳永逸的懒。”
嗯，今天我就要尝试说服我心里的正义小人，
我不是在偷懒，我是在想问题！
按老规矩，
用讲故事的方式讲道理。
献丑了！
承 我从大四到毕业，
一直在QAD当研发（就是研发工程师）
一般来说，“研发工程师”这个说法是分工上这么叫的，
洋文里叫 SE, Software Engineer,
对应测试工程师 QA, Quality Assurance。
互联网公司里是Web编程的话，
会从另一个维度上分成前端工程师 FE, Front End,
后端工程师 BE, Back End。
有些也会从部门上拆分成架构、技术（业务）、算法、数据不同的组。
QAD主要是按业务拆分研发部门，
我们当时是Foundation组（基础架构组）。
公司做的是SaaS形式的ERP系统。（SAP, Oracle都是我们的竞争对手）
这里的SaaS可以简单理解为年费会员，
大众(Volkswagen)公司买QAD的ERP系统并不是一锤子买卖，
当合同签订以后，
我们还要负责整套系统的安装、培训、维护、升级工作。
（当然大众也要对应地交“物业费”就是了）
公司部门分工大概如下：</description>
    </item>
    
    <item>
      <title>HR与程序员的日常（二）：OKR是啥</title>
      <link>https://liriansu.com/posts/2017-08-13-okr/</link>
      <pubDate>Sun, 13 Aug 2017 22:17:55 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-13-okr/</guid>
      <description>TI 输了，
熬夜看比赛的 Lirian 感觉心很痛。
于是他打算换个心情，
看看 Mia 最近的学习任务是啥。
 OKR 是什么 Mia 最近听的课程刚好讲到了 OKR 。
Lirian 其实只知道 OKR 是
Objectives and Key Results 的简称，
是一种绩效考核的方式，
KPI 是另一种绩效考核的方式。
感觉 OKR 跟 KPI 的关系，
可能像是素质教育与应试教育的关系一样，
各有优势，各有不同。
于是 Lirian 用一招*抛砖引玉*打开了话题：
“话说 OKR 和 KPI 究竟有啥区别啊？”
Mia 回以一招*斗转星移*：
“我觉得 OKR 和 KPI 是有本质区别的。”
Lirian 顺势一招乌鸦坐飞机问了下去：
“噢，有什么区别~请讲~”
没想到 Mia 不坐飞机，一招*借力打力*回了过来：
“那我先问你，你知道 KPI 是什么吗？”
Lirian 顿时懵逼了：
“啊…不知道……大概是绩效考核的一种方式？”
“你这么讲也对。
KPI 的全称其实是 Key Performance Indicator,
翻译成中文就是 关键绩效指标。</description>
    </item>
    
    <item>
      <title>GitHub上的小标签有什么好玩的</title>
      <link>https://liriansu.com/posts/2017-08-08-github-badges/</link>
      <pubDate>Tue, 08 Aug 2017 23:10:01 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-08-github-badges/</guid>
      <description>GitHub很多项目主页都会放上好玩的小标签（GitHub Badges），
这次我们也来玩点表面功夫。
 首先，我们要有一个项目 前阵子靖哥哥口嫌体正直地吐槽了一下lowdb：
 这个lowdb，
好用是好用，
但是也太low了吧&amp;hellip;
 我十分好奇，
跑去看了看lowdb的介绍：
 这是一个 JSON 格式的微型数据库。
 诶，微型诶，感觉萌萌哒。
那 Python 有没有对标的库呢？
有，那就是tinydb~
 tinydb 大概只有1200行源代码，以及1000行测试。
 啥？！这还tiny呢？
怕是18级的tiny吧？
于是我们决定，
要有一个比tinydb还tiny的，比lowdb还要low的数据库。
起名字顿时是个问题。
既然犹豫不定，
那就选择原谅他吧~
于是又一个轮子诞生了：
原谅数据库(hui-z/ForgiveDB)
GitHub Badges 忽略README里对项目本身的吹捧，
Logo下面那一长串绿绿的小标签，
就是Badges啦~
由于程序员一般都在GitHub上活动，
所以大家也习惯把这些叫做是GitHub Badges
（即使在别的地方也可以用到它们）
本质上这些小标签就是能点的图片，
比如用 Markdown 语法可以这么写：
[![ForgiveDB](https://img.shields.io/badge/ForgiveDB-HuiZ-brightgreen.svg)](https://github.com/hui-z/ForgiveDB) *这么一长串实际上是 Markdown 里图片的语法，加超链接的语法组合成的* ![图片的语法](https://img.shields.io/badge/ForgiveDB-HuiZ-brightgreen.svg) [超链接的语法](https://github.com/hui-z/ForgiveDB)  上面一串就会变成这样子：

这么一长串实际上是 Markdown 里图片的语法，加超链接的语法组合成的
超链接的语法
各种 Badges 具体来看，
我们在 ForgiveDB 里用到的标签有这些：
 shields.</description>
    </item>
    
    <item>
      <title>我们是怎么升级到Python3的</title>
      <link>https://liriansu.com/posts/2017-08-06-py2-to-py3/</link>
      <pubDate>Sun, 06 Aug 2017 12:07:32 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-06-py2-to-py3/</guid>
      <description>最近我们从Python2.7,
全线升级到了Python3.5。
 Python2 和 Python3 有啥区别啊？ 在程序员的理想乡里，
程序语言理应只是个好用的工具。
然而在现实生活里，
程序语言甚至是程序语言的版本，
关系到工程的很多方面。
Python2和Python3就像是小黄车和摩拜一样，
在某几个大的特性上有区别，
但本质上都一样，
不过一些细微之处又有不同。
比如说 Python2 最坑的 Unicode.
写过 Python2 的人总会遇到 UnicodeDecodeError 和 UnicodeEncodeError 这样的错。
在电话面试的时候，
我们回答候选人我们为什么会用 Python2,
也是把锅丢给谢老板：
 嗯是这样的，
我们第一行代码到整个初期框架都是 CEO 选的。
他是美国回来的，
所以不知道中国要用中文，
也会遇到 Unicode 相关的问题。
于是他没想太多，
就选了 Python2.7.
 真实原因还有很大一部分是因为当时一些库对 Python2 支持比较好
除了 Unicode 的区别，
Python2 到 Python3 还有一些系统自带函数有变化。
比如 urllib.urlencode -&amp;gt; urllib.parse.urlencode,
StringIO.StringIO -&amp;gt; io.BytesIO。
一般项目里面可以用six这个库来做兼容，
比如上面举的两个例子可以用six.moves.urllib.parse.urlencode
和six.BytesIO来替换，
Django也自带了一个six在django.utils.six.
不过我们是自己搭建环境，
所以其实不用考虑兼容性，
迁移工作大概的 Milestone 如下：</description>
    </item>
    
    <item>
      <title>人类真愚蠢——《南方公园》</title>
      <link>https://liriansu.com/posts/2017-08-05-south-park-intro/</link>
      <pubDate>Sat, 05 Aug 2017 19:29:14 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-05-south-park-intro/</guid>
      <description>给你们介绍一个美漫。
 讲到美国动漫（美漫），
不同人的第一反应是不一样的。
有人会想到《狮子王》、《猫和老鼠》，
有人会想到《瑞克和莫蒂》、《Happy Tree Friends》，
也有人会想到《超人》、《守望者》。
不过这些都不重要，
因为跟这些_辣鸡_动画/漫画相比，
我们今天要讲的是一个更_辣鸡_的动画：
南方公园 South Park 在美国的南部，有个公园，叫南方公园。
我们有四个小学生主角：
Cartman, Kyle, Stan, Kenny.
众所周知，
小学生都是怪物。
南方四剑客（没错，这个称号就是这么中二）的日常，
也是波涛汹涌。
比如说作为一家万众瞩目的创业公司，
要开新闻发布会啦（S18E01）：
比如说作为一个变性人，
要享受自己选择厕所的权利啦（S18E03）：
比如还有 Elon Mask 的乱入啦（S18E04）：
比如里面的加拿大人都是这个画风（S18E06）：
南方公园的特别之处 Rick And Morty特别之处是它的背景、线索、剧情设定，
Happy Tree Friends特别之处是它的直白、不留情面。
南方公园(South Park, 简称SP)的特别之处是在于他的世界观：
每个人都是特别的，所有人都是愚蠢的。
SP反政治正确（Political Correctness, 简称PC），
专门搞了个校长叫 P.C. Principal.
他做的事情全部都是政治正确的，
结果被讽刺地不行。
SP也反政治不正确，
虽然PC校长一直被挂，
但最后他还是很帅地站出来拯救了南方公园，
以及发表了一番gay little speech。
SP讽刺中国人。
在南方公园的中国人是开餐厅的，
眼睛小站不直，
满嘴蜜汁口音。
SP讽刺加拿大人。
长的奇怪，
思想简单，
爱好奇葩，
连画风都跟别人不一样（字面意义上的画风不一样）…
SP更加讽刺美国人。</description>
    </item>
    
    <item>
      <title>原来我喜欢的是打底裤</title>
      <link>https://liriansu.com/posts/2017-07-30-girls-stockings/</link>
      <pubDate>Sun, 30 Jul 2017 18:24:30 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-30-girls-stockings/</guid>
      <description>以前一直觉得穿黑色丝袜的小姐姐们好好看啊，
后来才知道，
我以为好看的那些都是打底裤。
 背景 以前的某个春天，
跟女朋友在街上闲逛的时候，
我感慨了一句：
“怪不得那么多男人喜欢黑丝，
PLMM穿黑丝是好看啊。“
女朋友鄙视了我一眼：
“你以为的黑丝，
其实都是打底裤。”
我：“啊？！？！？”
年幼的我对黑丝的理解很简单：
“穿在腿上的，
黑的，
看起来有丝的感觉，
那应该就是黑丝了。”
然后女朋友问我：
“你知道黑丝、裤袜、打底裤、紧身裤的区别吗？”
“……啥啥啥？能再问一遍吗。。。”
“你知道黑丝、裤袜、打底裤、紧身裤有什么区别不？”
“……噢噢噢，紧身裤我知道！
紧身的裤子！
搞摇滚的特喜欢！
就是汪峰那种！”
后来女朋友跟我稍微解释了一下，
再配合维基等解释，
我稍微总结一下这几个名词的区别：
丝袜 丝袜就是丝质的袜子，
黑丝就是黑色的丝袜。
这句话有没有很有韵律感，
感觉随时都要寻找光明了。
一般来说丝袜都比较透，
像那种腿毛比较旺盛的妹子，
假如不刮腿毛的话，
穿浅色丝袜就容易不好看。
所以从这个角度上来说，
黑色丝袜也更受欢迎。
而且黑色显瘦嘛。
裤袜 裤袜其实可以算是丝袜的一种，
分不清也不是你的错。
裤袜就是像裤子一样的丝袜，
普通的丝袜是袜子，
是两只一对的。
裤袜就只有一条，
它是连在一起的。
打底裤 首先打底裤跟安全裤肯定是有区别的。
作为一个舞区观众，
我大概很了解安全裤
打底裤是长裤，
好像说最开始功能跟安全裤类似，
都是防走光打底用的。
但是因为一些打底裤穿着很舒服，
也很自然地变成了单穿的长裤。
春秋之际路上小姐姐穿的黑色薄薄的裤子，
其实很多都是打底裤。
紧身裤 没错，就是汪峰的那种裤子。
总结 女朋友看完了我上面的解释，
表示我总结的很好，
但是理解的不对：
现在丝袜大部分也是连在一起的了，
裤袜比丝袜要厚。</description>
    </item>
    
    <item>
      <title>现金牛是什么梗？</title>
      <link>https://liriansu.com/posts/2017-07-27-what-is-cash-cow/</link>
      <pubDate>Thu, 27 Jul 2017 22:31:18 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-27-what-is-cash-cow/</guid>
      <description>最近产品经理小刘很苦恼，
因为别人一直问他，
PPT上面的*现金流*是不是写错了？
写成了现金牛?
 故事的背景大概是，
因为客户在我们的云平台上管理会员，
所以我们想免费给他们展示一波数据，
给他们做商业决策来点帮助。
SWOT 说到商业决策的分析方法，
有个很著名的 SWOT 分析法，
会从四个维度来分析当前形势：
 S, Strengths, 优势，
 W, Weaknesses, 劣势；
 O, Opportunities, 机遇，
 T, Threats, 威胁。
  比如诸葛亮在三顾茅庐作的隆中对，
就是典型的 SWOT 分析：
举个栗子，不要在意细节
 优势：将军既帝室之胄，信义著于四海。
 劣势：今操已拥百万之众，挟天子以令诸侯，此诚不可与争锋。
 机遇：刘璋暗弱，张鲁在北，民殷国富而不知存恤，智能之士思得明君。
 威胁：将军身率益州之众出于秦川，百姓孰敢不箪食壶浆，以迎将军者乎？
  把 SWOT 画成奇变偶不变符号看象限的图大概是这样子：
很多鸡汤小故事里会描述一个这样的场景：
 A公司以前发展很快，
但是最近陷入瓶颈了，
老板很苦恼。
后来他们花一百万美金请了专业商业公司B的人来分析，
这个B公司的人花了一个月的时间实地考察，
然后花了两天画了一个 PPT,
上面就两张图。
一张是家人合照，
因为美国人都很有家庭观念。
另外一张就是 SWOT 分析。
A公司老板很气愤：
“我花一百万不是让你来做 PPT 的！”</description>
    </item>
    
    <item>
      <title>程序员的二八定律</title>
      <link>https://liriansu.com/posts/2017-07-25-pareto-rule-of-programmers/</link>
      <pubDate>Tue, 25 Jul 2017 23:15:51 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-25-pareto-rule-of-programmers/</guid>
      <description>二八定律 (Pareto Principle),
泛指在各种事情中，
80%的结果是由20%的原因决定的，
这个定律一般用来定性而不是定量。
很有趣的是，
程序员们就很吃这个定律。
  20%的程序员写出了80%的代码。
 20%的程序员写出了80%的Bug。
 80%的代码出的Bug只占20%。
 也就是说有80%的Bug，是出在20%的代码里面。
 为了修复这20%的代码，程序员花掉了80%的时间。
 所以有80%的程序员，每天写代码的时间不到20%。
 80%的程序员都有自己偏好的编程语言，但只有20%的程序员会去辩论什么是世界上最好的编程语言
 80%的纷争都是这20%的程序员搞起来的。
 80%的编程语言都是20%的程序员搞起来的。
 一门编程语言里，只有20%的功能会被经常用到。
 但是面试题目范围在另外80%里面。
 假如不点名地去黑一门语言，那不管你黑的是哪个点，有80%的用户都会觉得自己喜欢的语言被黑了。
 所以程序员们一般去黑剩下的那20%的编程语言。
 80%的程序员都在面向对象编程，但是只有20%的程序员有对象（此数据有偏差）
 80%的程序员都知道小黄鸭编程法，但是只有20%的程序员有小黄鸭。
 80%的小黄鸭都被程序员抓起来了，此处应 @小黄鸭保护协会
 80%的需求可以在20%的时间里面实现。
 剩下20%的需求要花80%的时间去研究，20%的时间去实现，80%的时间去测试。（没错总共是200%的时间）
 不还技术债的话，80%的时间连20%的需求都做不完…
 坚持还技术债、不断学习、提升自我的话，那就是
   10 percent luck
20 percent skill
15 percent concentrated power of will.
5 percent pleasure
50 percent pain</description>
    </item>
    
    <item>
      <title>GitHub 要怎么玩</title>
      <link>https://liriansu.com/posts/2017-07-18-how-i-use-github/</link>
      <pubDate>Tue, 18 Jul 2017 23:15:49 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-18-how-i-use-github/</guid>
      <description>经常会听到其它程序员说：
哎呀，又在 GitHub 上发现了个好玩的项目。
那么问题来了，
他们怎么发现的呢？
 GitHub 是什么 知乎上有个万赞答案写的很好，
叫 怎样使用 GitHub ? - 珊姗的回答
不过里面的图有点过时，
新版的 GitHub 大概是这样的：
学术地说：
 GitHub 是一个通过 Git 进行版本控制的软件源代码托管服务，
它是世界上最大的代码存放网站和开源社区。
 简单的来说：
GitHub 是程序员放程序的地方。
这里说的放不仅指存放、放置，
还有放开、共享的意思。
普通程序员会把自己业余写的一些工具放到 GitHub 上去，
文艺程序员会把 GitHub 当做写博客的地方,
2B程序员会把公司的商业代码上传到 GitHub 上去&amp;hellip;。。。
GitHub 有什么好玩的 那既然 GitHub 是程序员放程序的地方，
听起来这么严肃，
它怎么可能跟好玩沾上边？
这个问题问得很好。
在我眼里，
所有程序员都是可爱的动物，
有一个词叫Programming Humor，
翻译成中文大概是*代码之趣*。
比如我很喜欢的XKCD系列漫画，
就有很多关于代码的好玩的梗：
（我凭本事丢骰子丢的4，
你为什么说这个数字不够随机？）
（Python 大法好！）
GitHub 上也有很多很好玩的东西。
比如etilqs的梗:
 有个小型数据库软件叫 SQLite ，
它非常好用。</description>
    </item>
    
    <item>
      <title>那当然是选择原谅她是什么梗</title>
      <link>https://liriansu.com/posts/2017-07-02-forgive-her-meme/</link>
      <pubDate>Sun, 02 Jul 2017 23:05:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-02-forgive-her-meme/</guid>
      <description>“她做了对不起我的事情，该怎么办？”
“那当然是选择原谅她啦！”
 绿帽子 绿帽子这个词好像流传已久了。
有说是春秋时期，
卖淫为生的人的家人要头裹绿巾，
以分贵贱。
还有个比较逗的说法是，
古代有个已婚女士搞外遇，
每次早上丈夫出门，
她都给丈夫戴上一顶绿帽子，
以此作为明显的暗号。
总而言之，
不论如何，
这个偏侮辱性的词语就流传了下来。
不过最近的一个梗把这个侮辱性给弱化了…
那当然是选择原谅她 这个短句的出处也是不一的，
有说是卜同学，
也有说是白同学…
不过事实就是最近的表情包的确为它的热度推波助澜了：
后来逐渐发展出了原谅帽系列表情：
还有人做了原谅帽的游戏…
green.ssyar.com
当然，
这个梗火了以后就会有对应的讨论：
知乎：“当然是选择原谅她啊”系列表情图是不是歧视女性
知乎：“当然是选择原谅她啊”系列表情图是不是歧视男性
&amp;hellip;
不过这个表情包真的很好玩啊，
每次我们谁写了个bug，
多了个需求，
就一下子想到了原谅帽了…
Saint Patrick&amp;rsquo;s Day 爱尔兰有个节日叫Saint Patrick&amp;rsquo;s Day，
大概讲的就是很久很久以前，
有个厉害的人到爱尔兰，
向大家传播了基督教感化了大家…
于是在那一天，
大家都会穿上爱尔兰国旗颜色（绿色）的衣物、袜子、帽子，
聚在一起，
喝酒…
就像中国人，
不论什么节都会过成情人节一样。
外国很多节，
最终都会变成喝酒的节…
那这该怎么办呢？
当然是选择原谅她啦~</description>
    </item>
    
    <item>
      <title>写程序的我的性格</title>
      <link>https://liriansu.com/posts/2017-07-01-my-programmer-habits/</link>
      <pubDate>Sun, 02 Jul 2017 00:20:23 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-01-my-programmer-habits/</guid>
      <description>写程序真开心啊。
 前阵子面试频繁的时候，
有一个工作了七八年的兄弟在简历上写，
自己大学学的是Java，
工作以后做的是全栈，
所以有十多年的Java开发经验，
七八年的前端开发经验，
还有若干年的Blabla&amp;hellip;
当时周丞和我就很无奈，
假如工作经验真的是这么算的话。
那中学时期就开始参加OI的同学，
岂不是都是十年软件开发经验起步了？
经验 我一直觉得软件开发的，
或者说程序员的，
“工作经验”是一件很扯的事情。
因为假如程序员停止了学习、思考与进步，
那么一个有十年工作经验的人，
只不过是工作的第一年学习了一年的工作经验，
然后又重复了九年。
真正的十年工作经验，
应该是那些“苟日新，日日新，又日新。”的人。
 有一句俗话叫
朝闻道，夕死可矣。
这句话的意思就是一个人早上听到了一个很科学的道理，
想了一天，
到了傍晚终于发出了“死可矣”(すごい)的感慨之声。
 当然，
人的一生不可能每天都在学习崭新的姿势，
就算某一天了解到了新的知识，
也不一定能够消化吸收，
说不定隔夜就忘了。
不过我们人类这种生命，
正是所有过去的积淀。
我们读的书、
吃的饭、
做的事情都会消失，
但是我们的生命会越来越厚重。
举个栗子，
我是记不得我写过的每一行代码的，
但是我能清晰地感觉到，
我身上有些特质，
和写程序有着一定的羁绊。
 懒
 科学
 试试看
 问个问题
  懒 Quora上有个问题是
聪明人里面，懒人是不是比勤奋的人贡献更大？
有个回答我非常喜欢：
 “I divide my officers into four classes; the clever, the lazy, the industrious, and the stupid.</description>
    </item>
    
    <item>
      <title>写程序与取名字</title>
      <link>https://liriansu.com/posts/2017-06-24-naming-variable/</link>
      <pubDate>Sat, 24 Jun 2017 19:36:17 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-06-24-naming-variable/</guid>
      <description>据说平均下来，
程序员会有10%的时间花在取名字上。
 今天和俊儒聊天的时候，
讲到了在知乎上看的，
《扩散性百万亚瑟王》为什么停运的原因：
这种等级的中二程序员的确可以留名青史了…
大型程序一般都是团伙作案，
所以“写出逻辑清晰、见文知意”的程序，
也是一个程序员的必备技能。
按照正常文章的套路走，
这里我们要介绍一下，
绝大多数的计算机词语是有唯一的中英对照的：
服务器 - Server 表 - Table 事务 - Transaction 等等  像这类词语一般来说都没啥异议。
写程序的时候就直白地写就行了。
不过有的时候程序员要写富含需求的代码，
就可以玩一玩了。
代码片段 之前有一段代码，
要实现软文、软广相关的功能。
于是取变量名时，
翔神一拍大腿：
那就是advertorial这个词了！
这个词非常准确，
就是软文的意思。
吃瓜群众纷纷表示真牛逼！
然后代码写好了，
到浏览器里跑一下：
结果后端接口调用挂了…
定睛一看，
原来是浏览器的防广告插件自动识别了advertorial这个词，
把我们的接口屏蔽了…
&amp;hellip;
于是后来数据库里，
软文还是advertorial，
但是url里，
软文变成了soft_article…
吃瓜群众纷纷表示更牛逼了…
还有一段代码，
要实现一个大礼包相关的功能。
类似于星巴克88元的礼品卡，
送券送积分送储值等等…
于是问题来了，
这个“大礼包”的抽象类应该叫什么名字呢？
当时系统里面已有的一些英文对照有：
积分奖 reward, 券 coupon, 礼品卡 gift_card等等……
感觉好的名字都用完了，
我们都停下了手里的键盘，
开始了头脑风暴…
gift_bag感觉很蠢，
尤其是有了gift_card。
这种奖励是一系列产品的叠加，
也可以叫production，</description>
    </item>
    
    <item>
      <title>我的工作</title>
      <link>https://liriansu.com/posts/2017-06-11-my-work/</link>
      <pubDate>Sun, 11 Jun 2017 13:49:36 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-06-11-my-work/</guid>
      <description>前两天和家里打电话，
聊到了工作上的事情，
我多讲了几句，
虽然爸妈听不懂，
但他们听的很开心。
 我一直是个粗糙的利己主义者，
有的时候会过量地我行我素。
难得有个机会思考一下，
就借此写点东西，
记录一下我现在的工作生活吧。
再惠 去年十月左右，
百姓网的HR PP找到了我的GitHub，
要了我的简历，
约我到百姓网面试。
因为大学室友周丞之前就是在百姓干活的，
我就去问他百姓各方面怎么样。
他大概讲了一下他眼中的百姓，
然后问我是不是在找工作？
不如顺便发个简历来？
帮我内推一下？
我问他现在在哪工作，
他说在再惠，是个创业公司。
我第一感觉再惠这个名字听起来不响亮，
于是上网搜了下，
结果除了融资的新闻和官网，
没搜到任何有意义的信息，
连吐槽面试的贴子都没。
我又去知乎搜了一下再惠，
然后没搜到问题和回答，
只搜到两个人，
一个是创始人之一赵洋，
另一个就是周丞-_-&amp;hellip;
当时总有一种再惠不靠谱的感觉，
不过感觉周丞现在还是蛮开心的，
应该不像是在传销组织？
（毕竟看过很多被熟人带进传销组织的故事）
结果没想到最后经过一番面试和抉择，
我还是加入了再惠这个传销组织 :)
（这句当然是玩笑话）
我司①，也就是再惠，是做SaaS系统的。
呃，其实我也搞不太懂这个词，所以按目前的情况来说，
我们主要在做餐饮行业的会员系统解决方案的。
举个栗子。
周末我和女朋友打算出门吃顿好的，
在大众点评上看到了魔都有家网红餐厅暗恋桃花源，
于是决定去吃这家店。
吃完饭以后买单，
服务员提示说扫码成为桃花源的微信会员可以享受满100减5的优惠，
于是我很开心地扫了桌子上贴的二维码，
然后关注了桃花源的公众号，
之后在公众号里用微信支付买了单。
之后过了一周，
某一天突然桃花源的公众号给我发了张“桃花源常伴你身旁，下次消费可以全单九折”的优惠券。
然而有钱的我不想为九折优惠跑一趟，不为所动。
再惠的会员系统就学习到了原来小额优惠打动不了这个顾客。
又过了两周我突然收到了一张优惠力度更大的八折优惠券…
因为这家店味道和风情都不错，
我最终又回去吃了一顿 :)
没错，上面这段话里的粗体字，
除了大众点评都是我司的业务内容~
大众点评做的更多的是拉新，拉流量，
我司做的更多的是留存，维持会员关系。
比如我司有个经典客户案例，
商户叫玲珑宝宴，</description>
    </item>
    
    <item>
      <title>我也看完了《人人都是产品经理2.0》</title>
      <link>https://liriansu.com/posts/2017-05-21-so-many-pm/</link>
      <pubDate>Sun, 21 May 2017 00:18:14 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-05-21-so-many-pm/</guid>
      <description>最近把很有话题性的《人人都是产品经理》看完了，
看的是2.0版本，这大概是个读后感吧。
 这本书其实是入门级别的科普读物，
作者试图用简洁的语言、生动的例子和必要的术语来诠释产品经理（Product Manager）的日常。
因为书的定位不是教材，
所以指望看这本书能像看《算法导论》一样学到算法，
看《代码大全》一样学到代码之道是期待过高了。
不过这本书很多地方的视角还是很特别、很好玩的
:) 或者说有的时候从比较PM的角度来看问题的确会好玩一些。
比如书里提到一句
 只做一次的事情求可行解，反复做的事情求最优解。
 这句话就很科学。
因为写程序的时候也是这样的。
有些出现频次低的需求，
程序员就会写个脚本去做。
而假如这个需求老是出现，
那程序员就会重新审视问题，
完善地考虑一遍，
再优化/重做之前的脚本。
书里还有一句话（稍微凝缩一下）
 对某个领域的激情是能通过做过什么而看出来的。“做过什么”是指“输出”而不是“输入”。比如看过什么书，逛什么网站都是输入。而写过一些言之有物的文章，做过一些哪怕很小的Demo，都算输出。
 虽然这段话是说怎么面试PM的，
但其实任何事情都是这个道理。
举个栗子，
我最近已经不敢说“我很喜欢二次元文化了”。
因为我很长一段时间都没投过视频，
参与动漫相关的讨论，
甚至没发过弹幕（惭愧）
所以即便我没事会看一些动画、漫画，
这些也不过都是输入而已，
我并没有什么输出（滑稽）
我很喜欢的一个小节 书里有一个小章节，叫《如何通过提问把别人干翻》
大意是别人在讲PPT的时候，
你可以提这些问题来把他干翻：
  为什么要做这件事，不做的话会死人吗？
 这是用户的目标还是我们的目标？是不是老板的目标？老板换了怎么办？
 这个用户有普遍性吗？能代表多少人？这类用户对我们优先级是什么？
 数据来源是什么？什么时候获取的？是怎么采样的？
 为什么没有看到这个产品线的大图？5年后这个产品是什么样子？你实现整个图景的途径是什么？
 未来的确很美好，但怎么实现？现在如果只做一件事，最重要的是什么？你打算怎么做？
 ……（还有很多）
   光是粗略的看了一遍问题，
我已经能想象会议室里的尴尬的沉默了……
其实《把别人干翻》的这系列问题，
跟《如何写出无法维护的代码》的意思都是一样的，
通过反向的思考（假如我是刁民）来完善自我。
好奇心与行动力 书里很多次地提到过一对词：【新手】和【专家】。
而且后面还说
“一个好的PM不仅有新手心态，热爱思考，拒绝存在即合理。</description>
    </item>
    
    <item>
      <title>Vim, Tmux, Zsh怎么读</title>
      <link>https://liriansu.com/posts/2017-05-12-pronunciations/</link>
      <pubDate>Fri, 12 May 2017 22:41:02 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-05-12-pronunciations/</guid>
      <description>孔乙己显出极高兴的样子，将两个指头的长指甲敲着柜台，点头说，“对呀对呀！……回字有四样写法，你知道么？
  前阵子 GitHub 上有一个很好玩的 Repo ：
shimohq/chinese-programmer-wrong-pronunciation
列了一些国内程序员容易读错的词，
过了一遍我发现我也中招了：
Django 读作 Jango 就行了，D不用读出来
Vim 怎么读 这让我想起前阵子听冰河学长和别人聊 Common Lisp 的时候，
（一个多小时的纯聊天，听完收获很大）
把 Vim 单个字母地读出来读成了 V - I - M &amp;hellip;
当时我就很好奇地去查了一下大部分人是怎么读 Vim 的。
结果在万能的 Vim Manual 里发现了 :help pronounce，
里面是这么说的：
 Vim is pronounced as one word, like Jim, not vi-ai-em. It&amp;rsquo;s written with a
capital, since it&amp;rsquo;s a name, again like Jim.
 也就是说 Vim是一个词连读的，就好像读Tim一样，很科学
Tmux 怎么读 不像 Vim 的读法，有一个比较官方的说法。</description>
    </item>
    
    <item>
      <title>我可能看了假的技术书</title>
      <link>https://liriansu.com/posts/2017-04-22-how-google-works-note/</link>
      <pubDate>Sat, 22 Apr 2017 01:48:05 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-04-22-how-google-works-note/</guid>
      <description>清明节的时候在火车上把 How Google Works 给读完了，
我原以为读这本书会提升技术，
没想到提升了 HR 的知识（懵逼
 这本书讲啥 写书的人叫 Eric Schmidt，
是 Google 的 Executive Chairman。
然而我并不知道这个职位具体是做啥的，
大概翻译成中文会是“执行总裁”，
感觉做很多管理相关的工作。
不论如何，这个职位是不写代码的。
这本书条理极其清晰，
整本书的内容用章节小标题即可概括：
  像创始人一样工作
 放权于员工
 只聘用比你优秀的人
 不要把职业发展和绩效管理混淆
 关注团队的两端：最好的和最差的员工
 既要节俭，又要慷慨
 不公平薪酬
 助推 这个翻译太屎了
 能力越高，期望越高
 享受你的工作
   读完这本书基本上我的感想如下：
 卧槽，外国人的英语是溜啊
 不愧是谷歌，有些东西是只有他们才能这么搞，规模效应是厉害
 在吹牛逼之前，首先你得变得牛逼
  书里的招聘 前几章的重心都在招聘上，
作者讲到一条大家都认同的道理，
就是面试是无法精确衡量一个人的水平的。
所以对此，他们采取的解决方案就是
招聘Top10%的人才，这样他们就算表现再差，也只会是中等水平。
看到这里，
我总有一种我要买最贵的食材，这样做出来的菜就不会太难吃
的浪费的感觉&amp;hellip;
大厂毕竟是大厂啊&amp;hellip;（心酸地、嫉妒地</description>
    </item>
    
    <item>
      <title>hunter2是什么梗</title>
      <link>https://liriansu.com/posts/2017-03-26-hunter2-meme/</link>
      <pubDate>Sun, 26 Mar 2017 23:58:26 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-26-hunter2-meme/</guid>
      <description>简单来说：
这是一个弱密码。
 hunter2 密码安全是个长盛不衰的话题，
前阵子又有人统计了2016年最弱的密码。
每次明文存储密码的大网站数据库泄露，
也都有人统计弱密码排名。
像123456、letmein、password都是典型的弱密码。
hunter2也是一个弱密码，
其中的梗起源于2004年左右IRC上面的一段对话：
&amp;lt;Cthon98&amp;gt; 在聊天框里输入你的密码，系统会自动地把它变成星号 &amp;lt;Cthon98&amp;gt; ********* 你看！ &amp;lt;AzureDiamond&amp;gt; hunter2 &amp;lt;AzureDiamond&amp;gt; 我看不到星号 &amp;lt;Cthon98&amp;gt; &amp;lt;AzureDiamond&amp;gt; ******* &amp;lt;Cthon98&amp;gt; 我看到你发的是上面这行 &amp;lt;AzureDiamond&amp;gt; 哇哦，真的？ &amp;lt;Cthon98&amp;gt; 没错 &amp;lt;AzureDiamond&amp;gt; 你用hunter2把我的hunter2给hunter2了 &amp;lt;AzureDiamond&amp;gt; 哈哈，你看这串是不是很有意思 &amp;lt;Cthon98&amp;gt; lol 是啊。所以说每次你输入hunter2，我看到的都是******* &amp;lt;AzureDiamond&amp;gt; 真是酷炫，我以前都不知道IRC会自动屏蔽密码 &amp;lt;Cthon98&amp;gt; 是的，不管你在哪输如hunter2，别人看到的都是******* &amp;lt;AzureDiamond&amp;gt; 屌爆啦！ &amp;lt;AzureDiamond&amp;gt; 等等，你怎么知道我密码的？ &amp;lt;Cthon98&amp;gt; 呃，我只是把你的*******给复制了一下，你看到的可能是它的原样hunter2  用表情图表示就是这样子：
这样的套路在新时代就是这样子的：
（今天是马化腾的生日，转发你的密码到五个群，再看看你的头像）
[XKCD 936]也是讲密码安全的：
于是某Redditor也发现了，
写教务处网站的那个同学，
也看XKCD：
所以总的来说，
hunter2就是一个关于弱密码的梗。
希望大伙的密码都很安全，
相关的虚拟财产什么也都很安全 :)
其它 在如今，用一个好的密码管理软件是很好的选择。
假如你嫌密码管理软件太麻烦，
那么选一个有数字、大写字母、小写字母、特殊字符的10位以上的密码也是不错的选择。
然而有很多网站不支持特殊字符ORZ
还有网站限制了很短的密码长度…
╮(╯▽╰)╭ 假如网站登录框旁边，
能把他们当初注册的密码条件写上就好了。</description>
    </item>
    
    <item>
      <title>搭建舒适的 Windows 开发环境</title>
      <link>https://liriansu.com/posts/2017-03-24-windows-dev-env/</link>
      <pubDate>Fri, 24 Mar 2017 02:00:55 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-24-windows-dev-env/</guid>
      <description>假如你也不介意身处鄙视链的最底端，
那来交流一下怎么样搭建Windows的开发环境吧
 鄙视链的最底端：Windows 鄙视链是程序员日常生活中确实的一部分，
比如拿经典的编程语言来说，
有种说法是：
 C 语言工程师鄙视 C++ 工程师，
C++ 工程师鄙视 Java 和 C# 工程师，
Java 工程师和 C# 工程师则互相鄙视。
写静态语言的工程师鄙视写动态语言的工程师。
用 Python 3 的工程师鄙视还在用 Python 2 的工程师，
用 Python 2 的工程师鄙视遇到 UnicodeEncodeError 的工程师。
所有的工程师都鄙视 PHP 工程师。
 而在用的操作系统方面，
鄙视链的说法基本是这样的：
 用 Mac OS X 的工程师鄙视用 Linux 的工程师，
用 Linux 的工程师鄙视用 Windows 的工程师。
 虽然是这么说，
但我还是很喜欢 Windows 的开发环境，
主要原因是：可以玩游戏…
虽然目前我已经几乎不玩了，
但是这个可以玩游戏的无限可能性深深地吸引着我&amp;hellip;
o(〃&amp;rsquo;▽&amp;rsquo;〃)o
所以我们要通过一系列步骤，
搭建一个最舒服的 Windows 开发环境！和游戏环境
必备软件 有几个软件我认为是 Windows 开发环境中必不可少的。</description>
    </item>
    
    <item>
      <title>HR与程序员的日常（一）： HRBP与Markdown</title>
      <link>https://liriansu.com/posts/2017-03-20-hrbp-and-markdown/</link>
      <pubDate>Mon, 20 Mar 2017 01:49:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-20-hrbp-and-markdown/</guid>
      <description>简单来说，
HRBP是一种角色，
Markdown是一种语法。
  Lirian是男程序员，
Mia是女HR。
他们经常会互相科普各种名词，
Lirian决定把谈话记下来。
 HRBP 话说某一天Lirian问Mia：
“问个问题啊，HRBP究竟是什么？”
Mia十分惊奇：
“怎么想起问这个了，贵司要招HRBP么？”
“不是不是，我就是好奇一下。
比如先说HR吧，我在想，
HR的全称其实是Human Resources，
直译过来就是人力资源。
那假如说‘我是一个HR’，
直译过来岂不是‘我是一个人力资源’了么？
感觉怪怪的。”
“哎呀，这个是习惯用法啦。”
“那HRBP呢？HRBP全称是什么？”
“HRBP的全称是Human Resources Business Partner。
你首先得要有一个概念，
HRBP它广义上不是一个职位，
而是一种角色定义。”
Lirian很困惑：“什么意思？”
Mia并没有直接回答这个问题，
而是抛了另外一个问题：
“我从源头上跟你讲吧。
传统意义上人力资源的分类，
是分成了六大模块，
这个你知道吧？”
Lirian表示知道：
“我想想啊，你别说啊，
六大模块应该有招聘，培训，薪资…呃…
呃…和其它三大模块！”
“嗯，你前面的招聘、培训、薪资福利都说对了，
后面还有绩效、劳动关系，
和……人力资源规划~
但是呢，这种分类方式特别教条化，
怎么可能有人只做薪酬，
有人只做招聘呢？
比如你做招聘的，
肯定得了解候选人薪资呀，
也得了解绩效嘛。
所以后来就有人把六大模块这个理论完全抛开，
提出了全新的三支柱理论。”
“那是哪三个支柱呢？”
“第一个就是HRBP。
第二个是SSC，Share Service Center，
SSC处理的都是一般性事务。
还有个叫做COE，Center Of Expert，
就人力资源专家，
你可以想像那些讲师，
专门做培训、招聘、绩效的。”
Lirian好奇地问：
“那是不是说比如‘我去当个小HR’，
这里的小HR一般指的是SSC？”</description>
    </item>
    
    <item>
      <title>一种轻量级的Http加密方式：Hawk</title>
      <link>https://liriansu.com/posts/2017-03-18-hawk-authentication/</link>
      <pubDate>Sat, 18 Mar 2017 23:55:18 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-18-hawk-authentication/</guid>
      <description>这是一篇关于Hawk的简短介绍。
 什么是Hawk Hawk是一种轻量级的Http加密方式，
这里的轻量级是针对于OAuth / Digest这种加密方式而言。
Hawk主要防范的是中间人攻击，
它基于服务器和客户端共有的秘钥，
在时间戳的基础上对请求加密，
生成互相匹配的特征码。
Hawk的好处是整个加密的过程对计算能力要求不高，
用到的也是简单的sha256算法。
而且它可以只针对单个请求加密，
所以应用场景十分灵活。
在一个典型的Hawk应用场景中，
客户端首先通过某种方式跟服务端通信，
获取秘钥。
在之后的Http请求中，
客户端对请求采用Hawk加密，
并且把基本信息放在Http Header里。
服务器收到请求以后，
采用同样的方式进行加密比对，
假如两边都对上了，
则是一个合法请求。
否则返回401 Unauthorized
加密算法 Hawk协议规定的加密方式如下：
这是一个样例的HTTP GET请求：
GET http://example.com:8000/resource/1?b=1&amp;amp;a=2  要通过Hawk验证，
我们会把请求的特征用换行符拼接成如下格式，
最后再用HMAC sha256进行加密：
hawk.1.header 1353832234 j4h3g2 GET /resource/1?b=1&amp;amp;a=2 example.com 8000 some-app-ext-data  其中hawk.1.header是表示用version为1的hawk来加密header，
1353832234是unix timestamp，
j4h3g2是客户端生成的随机字符串，
GET是请求类型，
/resource/1?b=1&amp;amp;a=2是请求的query，
example.com和8000分别是host和port，
而some-app-ext-data是约定好要验证的额外内容（可为空）。
上面这段字符串是大小写敏感，空格敏感且换行敏感的。
假如说我们的秘钥是werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn，
则上面的样例请求经过HMAC sha256加密后的特征码会是6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=
最后我们把基本信息加入Http Header里，
请求就会变成这样子：
GET http://example.com:8000/resource/1?b=1&amp;amp;a=2 Authorization: Hawk id=&amp;quot;dh37fgj492je&amp;quot;, ts=&amp;quot;1353832234&amp;quot;, nonce=&amp;quot;j4h3g2&amp;quot;, ext=&amp;quot;some-app-ext-data&amp;quot;, mac=&amp;quot;6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=&amp;quot;  服务器端拿到HttpHeader.</description>
    </item>
    
    <item>
      <title>HR就讨厌我们这样的技术，今年一个offer都没发</title>
      <link>https://liriansu.com/posts/2017-03-08-what-a-hard-backend-interview/</link>
      <pubDate>Wed, 08 Mar 2017 20:44:40 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-08-what-a-hard-backend-interview/</guid>
      <description>还好我司HR人美心善，任劳任怨……
 面试套路 年后的求职市场逐渐活跃了起来，
直观感受就是收到的简历比年前要多不少，
于是最近基本上每天我们都有面试。
我司目前一共有三个后端工程师：
津铭，周丞，我。
我们面试的套路是电话面试 - 到场面试（三轮） - 发offer。
这里的到场面试（三轮）是指我们一共有三轮到面，
而不是提供三轮接送。
不过前几天面了个广州的小兄弟，
觉得他还蛮不错的，
谢老板表示只要人厉害的话，来回路费都可以报了。
嗯，接下来就需要他证明自己是不是厉害的人了。
面试标准 其实我们的面试标准不高。
但因为上一句我用了其实两个字，
说明我们的面试标准其实也不低。
之前一次有一个前端工程师来面试，
算法题一题都没答出来，
实现题答得也不是特别好。
但是我们一致觉得这个候选人
大学四年学的是物理，毕业以后才写前端的
能有这个水平很不错，
而且浑身散发着一种学习技术使我快乐的光芒，
很让人喜欢。
于是我们发了offer，
候选人选择去了小红书&amp;hellip;/(ㄒoㄒ)/~~
还有一次一个候选人来面试，
一路顺利地过到了我司CEO谢老板的当面面试。
谢老板是做技术的，
所以跟工程师很容易聊到一块去，
他跟候选人聊嗨了以后，
他问候选人：你为什么想到创业公司工作啊？
候选人表示很激动，
回答道：因为我的梦想就是创业啊，我想看看外面的创业公司是怎么做的，然后学了成套技术以后，我就可以自己去创业了！
当时谢老板就卧槽了。
我司技术 我司技术邮箱组有两个，
一个是yanfa@kezaihui.com，
研发部，很科学。
另外一个是llk@kezaihui.com，
这个邮箱嘛，
御姐控表示很淡定。
我司技术团队目前有10个人：
一个CEO，两个移动端，三个后端，四个前端。
类比于建筑行业就是：
一个包工头，两个推车工，三个水泥工，四个砌砖工。
因为人少，所以虽然说是前后端分离，
但是干的活交叉性很强，
后端们也会热情地参与像&amp;lt;如何评价真阿当的文章：《2016年前端技术观察》？&amp;gt;这样的热闹讨论中。
（主要是吃瓜）
还有一次吃饭的时候，产品经理Allen来问问题，
说数据库里我们主动营销的有效时间是哪个字段啊？
（没错我们产品经理也要知道数据库的表结构…）
津铭（后端）表示懵逼，有点忘了要看看代码，
然后靖哥哥（前端）说主动营销是ManualActivity，
场面顿时有点尴尬…
后端面试 年前谢老板表示我们今年工程师的quota是30个，
招满就不招了。
于是最近在金三银四的招聘季里，
我们每天都在勤劳地面试…
但是后端范围实在是太广了，</description>
    </item>
    
    <item>
      <title>XYZ问题</title>
      <link>https://liriansu.com/posts/2017-02-22-x-y-z-question/</link>
      <pubDate>Wed, 22 Feb 2017 22:22:16 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-02-22-x-y-z-question/</guid>
      <description>有的时候我们想解决的是X问题，
但是我们却纠结于Y问题，
最后却陷入了Z问题的陷阱里。
 简单的XYZ问题 大部分时候，
我们的大脑会线性地思考问题，
有的时候我们想的越多，
反而容易陷入问题的陷阱里。
 比如我需要一把指甲刀。
 前天指甲刀还在房间桌子上，但我妈昨天刚整理过桌子。
 我记得我妈好像把东西都放书房抽屉里了。
 但是书房有好几个抽屉，我想弄清楚指甲刀在哪。
 于是我问我妈：书房的抽屉里都有些什么啊?
  在这个里，
用XYZ问题去归纳的话，
X问题就是指甲刀在哪，
但我问出的Z问题却是抽屉里都有什么。
当然了，
这个例子本身也浅显极端，
我妈很容易看出只要脑袋好用一些，
直接问指甲刀在哪就行了。
但很多时候问题都没那么简单。
真实的XYZ问题 我不擅长写网页，
但是每次我都想试试写网页。
大概就像那种不能吃辣，
但还是要吃辣的人一样。
这种情况下，我就很容易陷入XYZ问题中。
比如我需要写一个打字机效果出来，
根据命令行编程的经验，
我就觉得打字机效果大概可以等同于每0.5秒更新一次内容，
我又觉得这个大概就等同于更新内容，等0.5秒再更新，
于是我搜索JavaScript sleep 0.5 second。
/(ㄒoㄒ)/
很可惜，
这样得到的解决方案会跟我想要的相差很远。
所以解决XYZ问题最好的办法就是：
理清思路，找到X问题，直接解决它。
在这个JavaScript的例子里，
我们的X问题其实是JavaScript typewriter effect
（用这个去搜索就能找到很多现成方案了）
语文老师说要写作文总结 俗话说话粗理不粗，理粗情意重。
以后我们遇到问题的时候，
也可以想一想：
 我们的X问题是什么？
 我们有没有陷入Y问题的坑里？
 解决Z问题有助于解决X问题吗？
  :)</description>
    </item>
    
    <item>
      <title>用GitHub托管静态HTML页面</title>
      <link>https://liriansu.com/posts/2017-02-03-hold-static-html-on-github/</link>
      <pubDate>Fri, 03 Feb 2017 21:59:54 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-02-03-hold-static-html-on-github/</guid>
      <description>这是一篇入门级的技术文章，
教你怎么在GitHub上托管静态的HTML页面。
 GitHub项目主页 GitHub有个设定，
就是每个项目的gh-pages分支可以通过user-domain/项目名来访问。
比如以前我把一些常用的js/css库放到我的static项目下(LKI/static)，
该项目下gh-pages分支的index.html就可以直接通过lki.github.io/static访问。
GitHub的这个设定本意是让每个项目都有自己的主页来展示，
不过我们也可以借用这个设定来托管静态HTML页面。
托管静态页面 托管页面的大概步骤如下：
 拥有自己的GitHub账号
 在GitHub上建立一个目录(Create new repository)
 用git创造该项目下建立gh-pages分支，提交一个index.html文件
  第3步的命令行版本大概如下：
$ cd /Users/liriansu/new-repo $ git init # 初始化git目录 $ git checkout -b gh-pages # 新建gh-pages分支，并切换过去 # 跑完上一条命令后，把你的index.html文件放到new-repo文件夹里 $ git add index.html # 告诉git说index.html要提交了 $ git commit -m &amp;quot;add index.html&amp;quot; # 提交index.html $ git remote add origin https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repository&amp;gt; $ git push -u origin gh-pages # 推到GitHub服务器上  然后我们就可以在http://&amp;lt;username&amp;gt;.</description>
    </item>
    
    <item>
      <title>最精简的程序语言：Iota</title>
      <link>https://liriansu.com/posts/2017-01-24-iota-language/</link>
      <pubDate>Tue, 24 Jan 2017 13:07:50 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-01-24-iota-language/</guid>
      <description>这门语言，只有两个保留字(reserved keyword)
 各种语言的reserved keyword 今天逛SO的时候发现了这样一个问题：
Reserved keywords count by programming language?
各语言的保留字数目按从大到小的量大概如下：
| ANSI COBOL 85 | 357 |
| JavaScript | 180 |
| C# | 102 |
| Java | 50 |
| Python 3.x | 33 |
| C | 32 |
| Go | 25 |
| Brainfuck | 8 |
| iota | 2 |
嗯，Python的保留字果然是少，
怪不得有个笑话是说Python其实是“可执行的伪代码”
 python is executable pseudocode, while perl is executable line noise.</description>
    </item>
    
    <item>
      <title>如何在Mac OSX中用Finder打开特定Path</title>
      <link>https://liriansu.com/posts/2016-12-26-go-to-path-in-osx/</link>
      <pubDate>Mon, 26 Dec 2016 17:01:38 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-12-26-go-to-path-in-osx/</guid>
      <description>今天终于学到了这个很有用的知识，
感觉有必要记下来…
 两个方法：
 在Terminal中输入open /Users
 在Finder中敲Command + Shift + G，然后输入/Users
  对Mac系统不熟悉的乡下人伤不起啊…</description>
    </item>
    
    <item>
      <title>disqus不稳定，于是我开始用commentit了</title>
      <link>https://liriansu.com/posts/2016-12-22-use-commentit/</link>
      <pubDate>Thu, 22 Dec 2016 20:20:07 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-12-22-use-commentit/</guid>
      <description>挂在GitHub Pages上的静态博客的评论总是个蛋疼的问题，
我以前一直都是用disqus的，
但是它总是处于墙于被墙的边缘…
 因为自己感觉没那个必要从头搭建博客服务器懒，于是我直接采用了GitHub Pages。
但是由于GitHub Pages是静态页面，所以评论系统就成了问题。
于是研究了一番以后我用了disqus的第三方评论。
disqus的便利之处在于构建简单，
我只要去注册一下，加一个comments.template就可以自动展开成评论页面了。
但是出于种种原因disqus对墙内用户支持的不好。
而且我又不想用多说，那个看起来无比蠢……
直到我最近发现了一款黑科技：Comm(ent|it)。
一句话概括它静态评论的原理是：所有的评论会变成Git Commit，push到你的Repository里面去。
雾草！
感觉很爽！
 补充：我们还要在commentit的配置页面配一下允许直接提交到master :)
   mmentit的配置页面]commentit-config配一下允许直接提交到master :)
  :) 所以是时候在本页面下面评论，
以成为本博客GitHub项目的Contributor啦~</description>
    </item>
    
    <item>
      <title>用vundle来管理vim插件</title>
      <link>https://liriansu.com/posts/2016-12-18-use-vundle-for-dotvim/</link>
      <pubDate>Sun, 18 Dec 2016 02:22:16 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-12-18-use-vundle-for-dotvim/</guid>
      <description>今天把vim插件管理器换成了Vundle，
之前我一直用的是pathogen。
 Vim配置 其实我是在实习以后才开始用Vim的，
当时Justin直接把他的vim配置给我clone了一份。
直接用现成的配置大大减缓了Vim的学习曲线，
而且很快就可以上手用起来了。
直到现在，我也觉得上手Vim的正确姿势就是找个大腿的配置。
后来Vim稍微用的多了一些以后，
我开始尝试自己手动改vimrc来改设置。
改代码的基础就是看代码/学习代码，
于是我了解到了pathogen，
一个快速添加插件的Vim插件&amp;hellip;
pathogen pathogen的优点就是小巧和直白：
你只需要添加autoload文件夹，
配置pathogen的载入，
就可以自己在预设好的插件目录下任意增删插件了。
然而实际使用中有几个蛋疼之处：
 为了方便，我一般会用git submodule来添加插件。
git submodule不仅有着屎一样的用法，
它的commit还是固定的，
于是我经常要手动去更新插件版本。
 因为用了git submodule，删除插件也变得麻烦了。
 pathogen主要是Tim Pope写的，
而这个项目一年内只有三次更新…
一点也不活跃。
  出于灵活度/便携度/活跃度的考虑，
我决定换个包管理器。
Vundle 于是我就想到了Vundle，
一个看起来很正式的Vim插件管理器。
它的配置其实也比较简单：
本地克隆Vundle包（可用git submodule），
配置vimrc，然后在vimrc内写入插件名。
不过第一次用命令vim +PluginInstall +qall加载插件的过程可能比较慢。
现在的配置 于是鼓捣了一下，
成功从pathogen换成了vundle。
dotvim地址在github上。
题外话：
第一次了解到Vundle的时候，
我总感觉这有种浓浓的Emacs包管理山寨风，
于是当时我根本没考虑Vundle…
所以说技术品味不能充当唯一技术评判标准呀~</description>
    </item>
    
    <item>
      <title>后端工程师技能树</title>
      <link>https://liriansu.com/posts/2016-12-16-backend-skill-tree/</link>
      <pubDate>Fri, 16 Dec 2016 23:33:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-12-16-backend-skill-tree/</guid>
      <description>我最近打算点专精天赋后端工程师，
于是先整理一份后端的技能树，
然后努力攒天赋点把它给点满。
 全栈 前几天我和Joyce聊天讲到“我想写个后端技能树/练级攻略”，
她疑惑地问我：“你觉得各个端之间要分那么开么？”
我想了想，说：“呃。。。”（其实也不知道说什么）
其实关于全栈的争论一直都有，每种意见都有科学之处：
有人认为全栈适合小团队，大团队更需要细化分工。
又或者全栈是个伪命题，因为光一样技术学精学通就要花很大功夫了。
的确，在分工明确的情况下，各项全能的人才反倒是被浪费了，
更不用说这样的人本来就少。
也有支持向全栈发展的人认为新人适合专精一门，牛人始终是全能的。
以及全栈指的不是语言，而是更基础的知识体系和综合能力。
我其实是蛮羡慕全栈们的，而且我也希望以后某日化身为全栈。
但我总觉得目前的自己还是太菜了，连一门技艺也不精通，更别提全栈了。
而且武侠小说里面说得好：大道相通。
也就是说我学好了一门技艺，想再去理解别的会更有经验，
即使达不到各项全能，说不定也能做到一精多专呢 :wink:
嘿嘿，这么说来，写代码学技术和练武还是蛮像的。
就好像程序员练级攻略一样，打怪升级穿女装嘛~
后端技能树  程序基础
 算法和数据结构
 语言基础
 框架和库
 抽象逻辑能力
 英语能力
 代码风格
 debug
  计算机网络
 网络协议
 服务器
 代理服务器
 网络安全
 权限
 RESTful
  数据与数据库
 关系型数据库
 非关系型数据库
 性能优化
 数据挖掘
 CAP
  团队协作</description>
    </item>
    
    <item>
      <title>git新手教程</title>
      <link>https://liriansu.com/posts/2016-09-19-git-first-lesson/</link>
      <pubDate>Mon, 19 Sep 2016 16:04:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-09-19-git-first-lesson/</guid>
      <description>这是一篇针对技术小白们的Git科普文章。
本文主要介绍版本控制工具Git的基本概念，
以及init,status,add,commit,reset,log几个基本命令。
 什么是Git 在十多年前，有好多程序员一起开发Linux系统。
这么多人一起写一个软件，他们就需要一个好的软件来
控制代码的版本/回滚代码/并行开发。
最开始他们是用的一个现成的软件叫*BitKeeper*，
但是后来BitKeeper居然想收费！于是他们就开发出了Git…
没错，Git就是一个由程序员自己写的，
写给程序员自己用的，用来管理写程序的工具。
本文想做的就是把Git这个*程序员用的*工具
介绍给不懂写代码，但是要写文档，改文档的同学。
（所以本文的具体栗子是在Windows系统下进行）
什么是版本控制 举个栗子：
今天要写毕业论文，我打开了Microsoft Word， 写完了第一章。
但我突然有一个更好的想法，我决定重写第一章。
于是我按下了撤销按钮，Word文档回滚到了最开始的地方。
我坐了三分钟，我发现其实还是我之前的第一章写的比较好。
于是我按下了重复按钮，Word文档又回滚到了我写完第一章的时候了。
上面的栗子，其实就是一个典型的*版本控制*场景。
而Git作为版本控制的工具，做的就是文件级别的*版本控制*。
接下来我们直接来试用Git。
安装Git 首先我们到Git的官方网站（英文）
去下载最新的windows版本的git：
（当你用浏览器打开这个网站的时候，就应该有下载框弹出来了）
下载地址：https://git-scm.com/download/win
下载完毕以后打开，大部分设定用默认的就行了，
几个关键选项图示如下：
安装选项：
安装命令：
换行符操作：
安装完毕后我们在任意菜单右键，
应该就可以看到“Git Bash Here”的选项。
并且打开以后我们输入git version
可以查看到git版本号信息，
这就说明我们安装成功了。
$ git version git version 2.9.0.windows.1 （具体版本可能会随时间变化，但这并不重要）  新手上路 打开Git Bash git是一个命令行工具。
（虽然也有图形界面，但那个太蠢了，
我们还是学习更好用的敲命令吧）
首先我们打开一个文件夹，
比如我打开的是D:\git-first-lesson\XML这个文件夹，
然后右键菜单 -&amp;gt; Git Bash Here，
就打开了一个这样的Git Bash：
再顺便说一下几个基本的命令：</description>
    </item>
    
    <item>
      <title>You can live your dream</title>
      <link>https://liriansu.com/posts/2016-06-27-you-can-live-your-dream/</link>
      <pubDate>Mon, 27 Jun 2016 23:06:13 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-06-27-you-can-live-your-dream/</guid>
      <description>前阵子我偶然看到了一个非常棒的关于梦想的视频
 视频地址在Youtube上 （需翻墙）
总之各种意义上都是很正能量的一个视频，
台词如下：
 I don’t know what that dream is that you have. I don’t care how disappointing it might have been, as you’ve been working toward that dream. But that dream your holding in your mind that it’s possible that some of you already know that it’s hard. It’s not easy. It’s hard changing your life. That in the process working on your dreams you are going to incur a lot of disappointment, a lot of failure, a lot of pain.</description>
    </item>
    
    <item>
      <title>URL中参数编码不正确的解决方案</title>
      <link>https://liriansu.com/posts/2016-06-07-encoding-in-url/</link>
      <pubDate>Tue, 07 Jun 2016 21:29:39 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-06-07-encoding-in-url/</guid>
      <description>说是说解决方案，其实并没有解决这个问题 :wink:
 URL中参数编码不正确 最近在做Python-Scrapy的爬虫，用Tornado写了一个服务器程序，
但是遇到的问题是
Tornado无法解析URL的中文
比如说样例小程序如下：
from tornado.ioloop import IOLoop import tornado.web as tw class SampleHandler(tw.RequestHandler): def get(self, path): self.write(path) app = tw.Application([(ur&#39;/(.*)&#39;, SampleHandler)]) app.listen(8080) IOLoop.current().start()  但是访问http://localhost:8080/浮云计算却只能得到æµ®äº�è®¡ç®�这样一坨东西&amp;hellip;
解决方案 长话短说，这是因为URL中文解码不正确的原因导致的。
所以我们利用站长工具url编码手动替换中文访问即可：
访问http://localhost:8080/%e6%b5%ae%e4%ba%91%e8%ae%a1%e7%ae%97就可以得到浮云计算啦。
详细原因 一开始我怀疑是因为字符串没用utf8编码，
于是尝试了不同的转换方式：
self.write(str(path)) self.write(unicode(path)) self.write(path.encode(&#39;utf8&#39;))  这些常识不是报错，就是根本没变化。
最终我找到了一个前人的经验，里面是这么讲的：
 看来你是不知道在浏览器地址栏手动输入中文和在页面上一个的链接的编码处理方式是不同的。。。。
打个比方，在windows系统上，你在FF地址栏输入&amp;rdquo;http://localhost/中文.html?m=汉语&amp;quot;，这里的“中文”两字的编码是utf8（这一点应该是跟浏览器设置相关），而“汉语”则是gbk，跟操作系统相关（大部分中国人的windows应该都是cp936，也就是gbk）。
如果你是通过某个页面访问这个链接的，则所有字符的编码都是跟页面的编码相关。
在IE上也是一样。
所以，我觉得还是打消在浏览器地址栏输入中文这个想法吧，要不然你要解码两次，而且还要保证页面上的编码跟系统一样，不然无法保证手动输入和页面点击的兼容性。。。。
 喔，原来是因为URL解码方式完全取决于浏览器和操作系统，也就是说中文有可能以GBK来编码
怪不得Python/Tornado认不出来了！
所以解决方案就是我们手动去解码一次啦~
（或者Python3 XD）</description>
    </item>
    
    <item>
      <title>在Windows上安装pip</title>
      <link>https://liriansu.com/posts/2016-05-18-install-pip-on-windows/</link>
      <pubDate>Wed, 18 May 2016 21:39:29 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-05-18-install-pip-on-windows/</guid>
      <description>pip是python的包管理工具，在Linux上安装比较简单，
但是在Windows上安装就稍微麻烦些。
 安装Python 首先我们到Python的官网下载Python。
值得注意的是Python2和Python3非常不同，
里面的差别可能有半个Java和JavaScript的差别之大。
我习惯使用的版本是Python2.7。
下载安装完以后，打开
我的电脑右键菜单&amp;gt;属性&amp;gt;高级系统设置&amp;gt;环境变量
设置好Path：
然后我们打开命令提示符，就可以进python的shell啦：
&amp;gt; python Python 2.7.11 on win32 Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information. &amp;gt;&amp;gt;&amp;gt; exit()  安装pip 我们使用get-pip.py一键安装pip，
先把它右键另存为下载到某个地方。
然后我们以管理员身份打开命令提示符，
直接用python运行该文件就可以安装pip了：
python get-pip.py  Windows上运行pip的方式是：
python -m pip Usage: C:\CodeEn\Python27\python.exe -m pip &amp;lt;command&amp;gt; [options] Commands: install Install packages. download Download packages. uninstall Uninstall packages. freeze Output installed packages in requirements format. list List installed packages. show Show information about installed packages.</description>
    </item>
    
    <item>
      <title>如何用Windows命令行统计文件行数</title>
      <link>https://liriansu.com/posts/2016-04-15-how-to-calculate-file-lines-in-windows/</link>
      <pubDate>Fri, 15 Apr 2016 22:13:15 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-04-15-how-to-calculate-file-lines-in-windows/</guid>
      <description>今天要统计文件行数，可是手边恰好没有Linux环境。
 Linux 统计代码行数 在 Linux 下这是一件很简单的事情：
find . -name &amp;quot;*.py&amp;quot; | wc -l  这行语句就可以很简单地统计出当前目录下所有py后缀文件的行数了。
Windows 统计代码行数 这时我们就不能用cmd而是应当用PowerShell啦。
Powershell是Windows基于.NET开发的一个自动化配置框架。
（其实就是新版命令行）
然后我们可以输入：
dir .\ -Recurse *.py | Get-Content | Measure-Object  我们就可以看到输出：
Count : 1253  表示当前目录下py后缀文件一共有1253行。</description>
    </item>
    
    <item>
      <title>为什么我讨厌吸烟</title>
      <link>https://liriansu.com/posts/2016-03-31-why-i-hate-smoking/</link>
      <pubDate>Thu, 31 Mar 2016 16:27:34 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-03-31-why-i-hate-smoking/</guid>
      <description>这两周读完了《中国烟草的政治版图》
 烟和毒品 上周的某一天，跟往常一样，上班路上全是吸烟的年轻男性。
捂着鼻子走到了公司，我觉得非常不能理解：
为什么烟不算是毒品呢？
大部分吸烟的人是做不到想戒烟就戒烟的，
而且就算是外力阻挠的情况下（家人反对，公共场合禁止），
这些烟民还是找机会吸烟。
既然这种精神上的依赖已经算得上是成瘾，
那么为什么我们不会认为香烟是毒品呢？
于是我稍微地去搜了一下，主流的观点是这样子的：
知乎上的回答
reddit上的回答
看来香烟的问题中外都有，总结下来有三点：
 毒品这个词更大意义上是法律用词，在英文里drug也有药品的意思。
所以“香烟是毒品”这个说法本身不够严谨。
 从久远的时候，烟草就是一个行业了，到了现在烟草行业更是发展壮大。
作为国家的一大经济来源，而且为了照顾烟民的情绪，全面禁烟是不现实的。
 个人角度来看，烟瘾仅仅会伤害个人身体，不会危害社会。
酗酒会撞车，大麻会致幻，吸烟只会死得早。
  中国烟草的政治版图 为了更严谨地看问题，以及努力完成今年的读书计划，
我去读了李成写的《中國煙草的政治版圖》。
这本偏论文向的书里面主要讲述了中国烟草的现状，
国家角度上吸烟可能带来的健康影响，
对中国香烟从上到下的分析，
以及从政治角度治理这些问题的建议。
整本书学术意味很浓厚，
基本没有小说性（也不应该有），
不过读起来还是津津有味，
比如里面有些数据非常引人深思：
我们都要多运动
正如作者所说，
一方面情况在变得更好，
中国烟民的比例在下降，
而且民众也自下而上地觉醒了健康的意识。
但一方面情况也不是那么好……
作者说
我的愿景 我一开始讨厌烟，完全是觉得烟味太呛人。
在庆幸家里没有人吸烟的同时，
我也逐渐觉得香烟更是一个社会问题：
 对于国家，香烟产业是税收大户。
但是从公众健康来说，禁烟可以提高国民身体素质，
避免吸烟所带来的医疗支出。
 对于中国社会，吸上等烟是身份的体现，而且烟本身作为礼品是普适性的。
（假如我们在所有香烟包装上印很吓人的肺癌图片…）
 对于低收入烟民，一包香烟就能在精神层面上让他们满足。
（所付出的仅仅是金钱和一点点寿命。）
  所以理性地说，吸烟的确有害健康，但是总有人会不在意自己的或是他人的健康。
随着社会的发展，烟草带来的问题也会逐渐暴露，
但这也为解决烟草问题提供了一个契机。
总的来说，我讨厌烟味，讨厌吸烟带来的健康问题，
我希望大家都可以活得更久。
希望世界越来越好。</description>
    </item>
    
    <item>
      <title>Ubuntu系统X packages can be updated的解决方案</title>
      <link>https://liriansu.com/posts/2016-03-16-ubuntu-package-can-be-updated-solution/</link>
      <pubDate>Wed, 16 Mar 2016 16:14:19 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-03-16-ubuntu-package-can-be-updated-solution/</guid>
      <description>一个关于Ubuntu系统的小技巧。
 x package can be updated 最近登录系统的时候，
系统老是提示
 x packages can be updated. y updates are security updates.  噢，就像AppStore上面的小红点一样，
更新一下就好了，
于是敲下命令：
 apt-get update apt-get upgrade  但是更新完以后，系统还是提示
 x packages can be updated. y updates are security updates.  在查阅了资料以后才知道，
update + upgrade不能更新完所有的软件包，
还要跑一条命令：
 apt-get dist-upgrade  这个有一点点小烦人的提示就不见了。
MOTD ubuntu开机时显示的这个Message叫
MOTD(Message of the day)，
很多公司会让系统管理员定制自己服务器的MOTD。
Ubuntu系统里，MOTD的脚本默认放在/etc/update-motd.d下，
我们所看到的x packages can be updated就是由
/etc/update-motd.d/90-updates-available这个脚本提示的。
所以我们想彻底去掉这个提示的话，
可以把/etc/update-motd.d/90-updates-available这个文件删掉（不推荐）。</description>
    </item>
    
    <item>
      <title>创建GitHub项目主页</title>
      <link>https://liriansu.com/posts/2016-03-15-create-github-repository-page/</link>
      <pubDate>Tue, 15 Mar 2016 21:19:53 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-03-15-create-github-repository-page/</guid>
      <description> 最近终于偶然了解了怎么给GitHub项目建主页。
 GitHub Pages GitHub Pages是一个让用户很方便托管项目网页在GitHub的服务。
比如我这个博客就是GitHub Pages建成的。
但是这样只能托管一个名为
GitHub用户名 + &amp;ldquo;.github.com&amp;rdquo;的项目(lki.github.io)
假如我还有一个项目也想用域名访问怎么办呢？
于是我机智的我用git submodule来解决了这个问题。
Git Submodule git submodule其实是一个很蠢的解决方案：
 为了保证最新的内容，父项目要随着子项目更新而更新。
 这个做法其实是hack了jekyll build，感觉不是特别靠谱。
 remove a git submodule实在是太痛苦了！
所以没有必要就不要加git submodule啦。
  更好的解决方案 前几天在逛羡辙学姐的GitHub的时候发现了这么一条Issue
里面这么说道：
 主页用 CNAME 指向 zhangwenli.com 后，ovilia.github.io 将跳转到 zhangwenli.com
其他项目 xxx 的 gh-pages 分支将会自动对应到 ovilia.github.io/xxx
 喔！原来GitHub会默认地把some-repo项目的“gh-pages”分支映射到some-one.github.com/some-repo下面去。
所以我们就可以用新建分支把菜谱映射到/mymenu了。
总结  GitHub项目可以建一个gh-pages分支来映射到github.com下面的github.com/repository-name.
 多看多学多试.
 假如不是绝妙的hack就要追求best practice.
  </description>
    </item>
    
    <item>
      <title>为什么我不招你当我的员工</title>
      <link>https://liriansu.com/posts/2016-03-02-this-is-why-i-dont-give-you-a-job-zh-cn/</link>
      <pubDate>Wed, 02 Mar 2016 13:41:04 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-03-02-this-is-why-i-dont-give-you-a-job-zh-cn/</guid>
      <description>匈牙利有一个叫Andor Jakab的人写了一篇很犀利的文章，
然后匈牙利网络评论就炸了。
 译者说 在2011年，匈牙利有个叫Andor Jakab的人发了篇文章，
叫Tőlem ezért nem kapsz munkát（现在链接已失效）。
后来由于这篇文章影响太大，在Facebook上有上万个赞，
他就自己把文章翻译成英文，在这里：
This is why I don&amp;rsquo;t give you a job
虽然离Andor Jakab发这篇文章的时候已经有好几年了，
而且文章可能比较偏激…
但是其中讲的道理还是令人深思的。
译文如下：
为什么我不招你当我的员工 我能雇12个员工，给每个人税后760欧的工资，但是我偏不。
首先你能在我公司里的一间很棒的办公室里工作。
其次我们不做电话营销，也不是诈骗公司。
你的工作是正经活，也要求你有很高的职业素养。
你将会每天工作八小时，每周干五天。
我会合法地雇用你，帮你交足税和社保。
这样的工作我能雇12个人，但是我偏不。
我来解释为什么。
我不会雇女员工 原因很简单：女人生小孩。
另外我也没有权利问她想不想生小孩。
假如我能问，而且她回答了，
理论上她也可以欺骗我，或是后来改主意了。
别理解错了，我对*女人生小孩*没有任何意见。
我也是这么出生的，我的小孩也是这么出生的。
我不会招女员工是因为：当她怀孕以后，
她就有三年产假，而且我不能解雇她。
假如她要生二胎，就一共有六年的假期了。
当然，工作还是要做的，
所以在这长长的产假里，我得再招一个人替她干活。
但是我不能在她产假的时候解雇她，我也不能在她回来以后解雇她。
所以我只能把那个一直在替她干活的人给解雇掉。
而且当一个女员工度完产假以后，
法律要求我得把她的工资提升到她现在职位应有的数目上。
我还得把她产假那几年的的年假给她补上。
于是等她回来工作的时候，她还会有2到4个月的带薪年假。
我也不会雇50岁以上的员工 并不是因为我对这些最有经验的员工有意见。
我不雇他们，是因为他们很快就到了保护年龄。
然后我就被他们套住了，就像我被女员工套住了一样。
在保护年龄里，你不能解雇他们。
所以我还是得给足薪水，即使他们干的不怎么样或者马马虎虎。
我不能解雇这些被法律保护的员工，但总得有个人来把事情做好，
所以我还是得再雇一个人。
我对法律保护他们没有任何意见，但是我不会雇佣他们。
我只会雇佣25到30岁的男员工 雇佣他们其实也是很冒险的。
因为没有正当理由的话（比如我自己收入不足，或者我不喜欢他们的工作态度这些都不是正当理由），我是没有权利解雇他们的。
我直接解雇他们的话很有可能要上法庭，也很有可能是他们胜诉。
不过这个风险我能接受。</description>
    </item>
    
    <item>
      <title>读博客和写博客</title>
      <link>https://liriansu.com/posts/2016-02-29-read-blogs-to-write-blogs/</link>
      <pubDate>Mon, 29 Feb 2016 13:27:52 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-02-29-read-blogs-to-write-blogs/</guid>
      <description>我最近把四火的唠叨里的推荐文章都看完了。
 读博客 我很喜欢读别人的博客，
尤其是跟着timeline一篇一篇地往下读。
读博客的时候不仅了解到四火一开始是一个华为的软件工程师，
后来到了亚马逊。
更是看到了他在刚工作时的苦逼生活，还有办公室政治。
不长的几篇博文，
可以学习到前辈们几年的经验浓缩。
就像前阵子把shell909090的博客给读完了。
吐槽一句：shell909090的“简历”页面倒更加像“关于”页面
看着比自己更早出道工作也更厉害的前辈，
就会有种类似鸣人看着自来也的感觉：
写博客 以前我也写博客，不过更多是儿女情长的事情。
没有技术博客的积攒（当初自己也并不想积攒）。
直到去年某一天看博客的时候，看到Jeff Atwood写的一句话：
 In 2004 I began this blog. I don&amp;rsquo;t mean to be overly dramatic, but it changed my life. Everything that comes after was made possible by this blog.
 听起来很感慨的样子，于是顺着链接读完了他的感慨。
Jeff觉得“虽然每篇博客都不长，但是持之以恒就改变了写博客的人”。
一些链接 最后推荐几个我觉得很不错的博客：
StackOverFlow创始人Jeff Atwood的博客 codinghorror.com
陈皓的博客 coolshell.cn
道哥的blog taosay.net
shell909090.org
四火的唠叨 raychase.net
lucida.me
大舒&amp;rsquo;s wiki qiukeke.com
希望有一天我也能出现在别人的推荐链接里 :D</description>
    </item>
    
    <item>
      <title>我的VR初体验</title>
      <link>https://liriansu.com/posts/2016-02-27-my-first-vr-experience/</link>
      <pubDate>Sat, 27 Feb 2016 21:08:19 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-02-27-my-first-vr-experience/</guid>
      <description>前阵子手机更新成了Android 6.0，
我照常到Gplay上看看有什么新App，
于是看到了一个Google Cardboard。
 VR VR，即Virtual Reality，虚拟现实。
在一些科幻电影里面，我们会看到主角头戴头盔，
进入了虚拟的却栩栩如生的世界。
又或者是主角脑后插管，
通过电流刺激脑部，
进入了虚拟的却栩栩如生的世界。
这就是VR虚拟现实。
因为本身概念上就带着一点娱乐性质，
VR这个概念近几年都在游戏界很火。
就比如前几年的体感游戏这个概念，
其实就带有半VR的性质。
Google Cardboard [Google Cardboard][wiki-cardboard]是Google推出的VR平台。
它的神奇之处就是理论上只需要硬纸板、透镜，
就可以自行组装一个VR眼镜。
当然这是理论上，
不过实际上一副Cardboard眼镜也只要几十RMB。
这是我前几天在某宝上买的：
在放入手机以后打开VR apps，
或者是3D电影就可以直接观看了：
VR感想  廉价。
廉价意味着普及，普及就可以改变生活方式。
可以想象以后的饭桌上家长就会斥责小孩：
“吃饭就别带头盔了…”
 改变。
世界上每一项新的技术都会带来改变，
从铁器到蒸汽到互联网。
 VR技术还有很大的提升空间。
  相关推荐 Google Cardboard的App
App: InMind VR
App: Lost Kismet</description>
    </item>
    
    <item>
      <title>《1984》读后感</title>
      <link>https://liriansu.com/posts/2016-02-18-thoughts-on-1984/</link>
      <pubDate>Thu, 18 Feb 2016 22:12:54 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-02-18-thoughts-on-1984/</guid>
      <description>看完了《1984》的第一感想就是：这本书比我想象中要短不少。
 概要 《1984》的故事发生在架空的20世纪，
一个普通的男主Winston在一个政治高压的国家里发生的故事。
在一段动荡以后，世界分成了三个国家。
Winston所在的国家叫Oceania，Oceania是由the Party领导的。（原文）
the Party的领导人叫Big Brother，
整个国家到处都贴着Big Brother的大幅照片，
照片下面是一行大字：
Big Brother is watching you.
关于书的感想 看这本书实在是太有即视感了。
 Big Brother.
书里面Big Brother是一个虚构的人物，他是the Party统治权力的化身。
我脑海中想象的Big Brother海报是类似于美国征兵的Sam大叔那样的，
虽然笑容和善，但是充满压迫感。
 政治高压。
跟Mia介绍完这本书的简介以后，Mia很敏锐地问我：
“很像在讽刺苏联诶，这书是冷战时候出版的么？”
的确，这本书是1949年出版，冷战是1947~1991年。
 合成词。
《1984》里面用了大量的合成词（至少我认为是合成的），
比如the Party对人民的三个要求：
crimestop, blackwhite, doublethink.
  三个词 书里解释了一下这三个词的意思：
 crimestop: 国家公民所想的应该都是美好的事物，不能有任何不好的思想。
 blackwhite: 我们的敌人指鹿为马就是错的，但是我们的组织指鹿为马肯定是为了我们好。
 doublethink: 有的时候一件事情是对的，但是这件事情的反面也是对的。
  在书里，the Party就主要依据着这三个原则统治人民。
我觉得这是作者非常有意思的一个想法：
做到这三点，人民就不会存在不可控的想法了，
而the Party希望大家的想法都是可控的。
就像书里主角问他一个朋友：
“把大家的想法都抹杀掉，对组织有什么好处呢？”
他的朋友回答他：
“你是一个人，你会死，但是当你成为了组织的一部分时，你就永生了。
道理跟剪头发一样，虽然人失去了一部分，但是总体还是活着。</description>
    </item>
    
    <item>
      <title>我的2016书单</title>
      <link>https://liriansu.com/posts/2016-02-15-my-reading-list-2016/</link>
      <pubDate>Mon, 15 Feb 2016 11:07:57 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-02-15-my-reading-list-2016/</guid>
      <description>过年的时候有一个小契机，让我可以督促自己定下一个比往年要长的书单。
 小契机 年后我在朋友圈里看到了这么一幅图：
“一个赞一本书，一年读完。”
这很棒嘛，于是我也发了这么一条状态：
很好，今年要读73本书。
这怎么可能嘛！
我的书单 其实也不是不可能，
比如把天龙八部算成八部……
毕竟不积跬步无以至千里，
我先整理了一个书单，
打算按顺序这么读下来：
 1984
 ANSI Common Lisp
 阿加莎克里斯蒂
 悲惨世界
 白板编程浅谈
 编程珠玑
 Code Complete 2 (Eng. Edition)
 Computer System Engineering
 创业时，我们在知乎聊什么
 触动人心 - 设计优秀的iphone应用
 重新定义团队：谷歌如何工作
 重构
 Docker - 从入门到实践
 Don&amp;rsquo;t Make me Think
 Dune
 代码整洁之道
 芙蓉镇
 鬼吹灯
 Head First设计模式
 红楼梦</description>
    </item>
    
    <item>
      <title>Jekyll build fail的解决办法</title>
      <link>https://liriansu.com/posts/2016-01-29-jekyll-build-fail-solution/</link>
      <pubDate>Fri, 29 Jan 2016 23:24:45 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-01-29-jekyll-build-fail-solution/</guid>
      <description> 我一直觉得笔记本和台式机jekyll build出来的结果不一样，
我猜想是Jekyll的版本不一致。
结果后来gem update以后，
反而jekyll build还失败了…
 Jekyll build jekyll build的结果不稳定是很难受的，
尤其每次build完以后git status看到的一大堆红色文件名。
而其实大部分都是各种HTML tag位置的差别。
我怀疑这有可能是两台机器上Jekyll的版本不同导致的，
于是我就跑了gem update以同步到最新版本。
等这个命令跑完以后，我跑jekyll build遇到的都是
jekyll build fail这样的ruby错误了。
Solution 搜了一下其实很简单，这是因为机子内同时装了多个版本的jekyll，
而他们又互相冲突所导致的错误。
（我不禁想问gem update为什么不会自动卸载旧版本？）
没错，解决方案就是我们跑一条gem cleanup卸载旧版本就可以了。
至少这个解决方案对我的问题是起效的。
Gem sources 另：有的时候gem官方源很慢，可以选择用gem sources命令更换淘宝源。
（不过淘宝源未必更新那么频繁）
$ gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ $ gem sources -r https://rubygems.org/ https://rubygems.org/ removed from sources $ gem sources -a https://rubygems.org/ https://rubygems.org/ added to sources  </description>
    </item>
    
    <item>
      <title>Jekyll-assume demo</title>
      <link>https://liriansu.com/posts/2016-01-28-jekyll-assume-demo/</link>
      <pubDate>Thu, 28 Jan 2016 11:06:56 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-01-28-jekyll-assume-demo/</guid>
      <description>For own interest, I extend a markdown rule using Jekyll.
 Grammar If a circle has a radius of {c-r} (20)cm, its circumference would be {c-c} (#c-r * 6.28)cm and its area would be {c-s} (#c-r * #c-r * 3.14)cm².
Note: For demostrating the grammer I have to add a space between &amp;lsquo;}&amp;rsquo; and &amp;lsquo;(&amp;rsquo;.
There should be no space between &amp;lsquo;}&amp;rsquo; and &amp;lsquo;(&amp;rsquo;.
Quick Show If a circle has a radius of {c-r}(20)cm, its circumference would be {c-c}(#c-r * 6.</description>
    </item>
    
    <item>
      <title>Javascript之路</title>
      <link>https://liriansu.com/posts/2015-12-21-learning-javascript/</link>
      <pubDate>Mon, 21 Dec 2015 17:26:52 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-12-21-learning-javascript/</guid>
      <description>上大学的时候，有一门课是教各种Java的。
到了布置期末大作业的时候，老师大手一挥：“你们写个电商交易网站就可以了。”
我们满怀期待地问：“只要写后端？”
老师说道：“没有前端怎么叫网站？HTML, CSS, JS是每个程序员的基本素养。”
 痛苦的自学之路 相对于美术，大部分程序员都更擅长数学。
我也一样。
老师布下作业以后，班里大部分人（包括我）都是看W3School自学的。
于是我们在屏幕上数格子画&amp;lt;div&amp;gt;。
很快我们意识到，假如每个人都这么折腾的话，作业就完成不了了。
于是我们组成了小团队，一部分人专门研究前端，一部分人先把逻辑给实现了。
最终在简陋的Ajax + jQuery下做完了那个项目
Bootstrap 虽然一直是网页苦手，但是由于网页其实是最简单而且最方便的展示手段（比PPT要强）
于是我默默地写些小东西练手。
对于库的利用使我_暂时_脱离了画&amp;lt;div&amp;gt;的束缚，
可以专注于内容了。
（于是我又了解了Lorem ipsum）
Free Code Camp 最近偶然发现了这个JS入门网站
不禁感慨当时为什么遇上合适的入门指南。
不过男人四十尚少年嘛，
就好像关谷说的
 活到老 学到老
 就是这么个道理。</description>
    </item>
    
    <item>
      <title>石头剪刀布中的求输策略</title>
      <link>https://liriansu.com/posts/2015-11-08-how-to-lose-in-rock-papar-scissors/</link>
      <pubDate>Sun, 08 Nov 2015 21:01:28 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-11-08-how-to-lose-in-rock-papar-scissors/</guid>
      <description>小时候七八岁，那时候还在看《读者》。
里面有篇文章讲了一下石头剪刀布中的求胜策略。
 石头剪刀布 先讲一段有用的废话吧。
一般的博弈情况下，问题都会简化成一个容易判断的模型。
也就是说虽然反应快的人可以把后手出招当作必胜策略，
但是数学模型中一般都会摈弃掉这种可能性。
（所以看起来数学家会不太喜欢社会学家？）
在石头剪刀布这个模型里，规则基本上是三点：
 双方同时出招，在石头、剪刀、布三个里面选一个。
 石头赢剪刀，剪刀赢布，布赢石头。
 假如平手就再战一局。
  这种三选一循环互克的游戏，国外也有，叫Rock-Paper-Scissors
求胜策略 数学模型往往会假定对局双方都是聪明人，
显然地，在石头剪刀布中聪明人的策略就是乱出，
这样双方获胜的概率都是50%。
不过在真实情况中，两边都是普通人。
(明明刚才说过要简化模型的=_=)
所以我们需要做一个假设：
一般人不会连续两下都做出相同的选择
也就是说当他这次出的是剪刀的话，下次较大可能不会出剪刀。
所以只要下局出布就可以不输。
同理，对方出石头，下局就出剪刀；对方出布，下局就出石头。
概括地说，这样的假设条件下：
对手出什么，下局就出被它克制的
当然了，题设本身也是这个策略的弱点。
假如你的对手头很硬，一直不改变出招，
那么这个策略就会一败涂地。
实战案例 和女朋友下楼梯的时候玩起了谁猜拳赢了就走一步的游戏，
玩之前火速地想了一下：
 女朋友输了不开心，赢了才开心，而且她不开心我也不能开心。
 女朋友在逻辑上不会跟我计较，所以应该不会头很硬地和我勾心斗角。
 女朋友她第一下喜欢出布。
  嗯，于是我采取了先出石头，再出被她克制的选项
成功连败了五六局。
嗯，毕竟求胜策略这种东西，也可以反着来用嘛。</description>
    </item>
    
    <item>
      <title>利用AUFS和Docker搭建多个私有开发环境</title>
      <link>https://liriansu.com/posts/2015-10-21-build-seperate-env-using-aufs-and-docker/</link>
      <pubDate>Wed, 21 Oct 2015 14:55:24 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-10-21-build-seperate-env-using-aufs-and-docker/</guid>
      <description>文章的开头先提个问题：
我们平常的工作中，一般都是怎样让每个人都拿到独立开发环境的呢？
 八仙过海 比如最常见的做法：每人都有自己的电脑，爱怎么弄怎么弄，同步代码就用Git之类的。
但是这样初始化的过程很慢，要装各种软件各种配置。
于是也有的是建一个中心服务器，大家用Putty这类软件SSH上去，每个人都有自己的账号。
但是这样环境不独立，而且权限控制很麻烦（毕竟每个人都想sudo）
后来就直接分发虚拟机镜像了，每个人拿到一个10G的镜像文件，
直接Load一下，环境就起来了。
但是这样每次修改环境就要更新近10G…
反正就是八仙过海，各有神通了。
利用AUFS和Docker也可以做到给每个人独立开发环境。
AUFS 根据Google:
 AuFS stands for Another Union File System. AuFS started as an implementation of UnionFS Union File System. An union filesystem takes an existing filesystem and transparently overlays it on a newer filesystem. It allows files and directories of separate filesystem to co-exist under a single roof.May 8, 2013
 假设我们有一个目录如下：
$ tree . └── public ├── database │ ├── dbfile1 │ └── dbfile2 └── src ├── helloworld.</description>
    </item>
    
    <item>
      <title>Virtual Machine, Vagrant, Docker的区别</title>
      <link>https://liriansu.com/posts/2015-10-12-virtual-machine-vs-vagrant-vs-docker/</link>
      <pubDate>Mon, 12 Oct 2015 12:49:55 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-10-12-virtual-machine-vs-vagrant-vs-docker/</guid>
      <description>Virtualization——虚拟化技术一直是计算机世界里面很重要的东西。
一般程序员听到这个词首先浮现出的就是Windows下面开着装着Linux系统的VMware。
而这个“装着Linux系统的VMware”就是我们口中的虚拟机（Virtual Machine）
 虚拟机的主要好处是可以创建一个与主机操作系统不同的开发环境
（比如说一般的办公室都是Windows系统电脑）
但是开发的便利也会导致初始化一个这样的环境比较麻烦
而且当项目进行到一定程度，对环境本身一些变化有依赖的时候
从零开始创建虚拟机的开发环境会很繁琐
Vagrant就是一种用来解决这种繁琐的工具
Vagrant 根据官方的说法
 Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team
 Vagrant本身不做虚拟机的工作，而是允许用户用VMware|VirtualBox|AWS来启动虚拟机镜像，他们管这叫Provider
当然了，镜像在Vagrant这里叫Box，而且很多公司已经做好了初始化的Box在这里可以直接用
Vagrant还提供了对Box的初始化脚本（Provisioning），这些初始化脚本可以用更多的脚本工具来完成对Box的配置
所以其实相比于传统的虚拟机，Vagrant是站在巨人的肩膀上，完成了自动化。
Docker Docker项目的目标是实现轻量级的虚拟化方案，它和Virtual Machine最大的不同是Docker容器共享操作系统的内核
所以Docker和传统虚拟机的对比是明显的：
   特性 Docker Virtual Machine     启动 秒级 分钟级   大小 一般为MB 一般为GB   性能 近原生 弱于原生   单机支持量 上千个 一般几十个   内核 共享 独立    Vagrant vs Docker 讲道理的话，这两个不应该放在一起比较， 这两者的虚拟化级别并不是一个量级上的</description>
    </item>
    
    <item>
      <title>VIM中小键盘失灵的解决方案(Putty)</title>
      <link>https://liriansu.com/posts/2015-10-09-use-keypad-with-vim-and-putty/</link>
      <pubDate>Fri, 09 Oct 2015 15:34:16 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-10-09-use-keypad-with-vim-and-putty/</guid>
      <description>我目前的开发环境是用Vagrant起一个虚拟机，然后用Putty连上去，用VIM做日常的开发工作。
但某一天更新了一些配置以后，我在VIM里用小键盘输入1的时候，VIM就会在前一行加了一个q字符，让我很是困惑。
后来谷歌了一下这个问题，得知只要把Putty的Application keypad mode给关了就行了。
 奇怪的错误 当刚开始小键盘的输入和预期有差别的时候，其实我是很困惑的。
首先我在Bash里面小键盘一切正常，这说明我键盘没问题，应该是VIM哪里不对。
其次我按的是1，结果出来的是前一行的q，我再按一下2，出来的是前一行的r。
假如键盘没有问题，要自己在VIM里面实现一个这种“功能”，那也要加一行配置：
inoremap &amp;lt;Num1&amp;gt; &amp;lt;Esc&amp;gt;Oq
但是这也太奇怪了吧，VIM里面怎么可能把&amp;lt;Num1&amp;gt;给替换成&amp;lt;Esc&amp;gt;Oq这么奇怪的东西？
寻求答案 于是我找到了VIM wiki上的一篇解答
根据这篇解答，问题是出在Putty上。
Putty会默认启用“Application Keypad Mode”，这个选项被启用以后
所有小键盘上的按键（包括）都会输出一串按键序列：
| 原按键 | 生成序列 |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
| &amp;lt;Num1&amp;gt; | &amp;lt;Esc&amp;gt;Oq |
| &amp;lt;Num2&amp;gt; | &amp;lt;Esc&amp;gt;Or |
| &amp;lt;Num3&amp;gt; | &amp;lt;Esc&amp;gt;Os |
| &amp;lt;Num4&amp;gt; | &amp;lt;Esc&amp;gt;Ot |
| &amp;lt;Num5&amp;gt; | &amp;lt;Esc&amp;gt;Ou |
| &amp;lt;Num6&amp;gt; | &amp;lt;Esc&amp;gt;Ov |
| &amp;lt;Num7&amp;gt; | &amp;lt;Esc&amp;gt;Ow |
| &amp;lt;Num8&amp;gt; | &amp;lt;Esc&amp;gt;Ox |</description>
    </item>
    
    <item>
      <title>这篇博客是怎么建成的</title>
      <link>https://liriansu.com/posts/2015-09-24-how-this-blog-was-built/</link>
      <pubDate>Thu, 24 Sep 2015 20:26:17 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-09-24-how-this-blog-was-built/</guid>
      <description>其实最开始的时候我是用LAMP在学校的IP上搭了一个个人博客，当时这么搭博客有几个很蠢的问题：
  晚上11点断网，早上6点才恢复网络，所以这个“个人博客”会断网
 学校把对外的80端口给封了，而域名访问默认就是80，所以校外访问博客要变成 http://cloudisdream:8080这种奇怪的模式
 由于是自己的电脑做服务器，还得保证一直开着，这样始终不太好
  JAVA / Servlet / Structs + Spring + Hibernate  在收了可观的小费以后，旅店老板悄悄地告诉你： 每个大学的软件工程专业都会教JAVA+SSH
 其实在LAMP之前，我曾经试过用课程里的Java+Servlet写过一个类微博的（个人？）网站
大概长这样子:
一边写我就一边感慨网页设计真是艰难，而且其实这个主页也是模仿当时的网易微博的
LAMP + WordPress 在前台HTML CSS JS到后台JAVA SQL都写过一遍以后，我开始意识到全栈工程师虽然听起来很美好，但是写起来实在是心太累了
那个时候和ED聊天，刚好聊到他的博客是用WordPress搭的，于是我就在自己的电脑上搭了一个服务器
虽然文章开头说了这么搭建服务器的缺点，但是其实学校还是给我们提供了一个便利：固定IP
于是我就去万网买了个域名，CNAME一下到学校IP。
但是因为实在遭不住一直开机，还要断网，后来还是抛弃掉了这个方式。
Github Pages + Jekyll 现在的博客就是最简单的GitHub Pages + Jekyll
网页放在GitHub上可以享受版本控制这个得天独厚的优势，Jekyll用的是Ruby，简单易用好上手。
从无到有搭建博客基本上就这么几步：
 注册Github账号，并创建 account.github.com 这个目录
 跑gem install jekyll，然后gem new my-site
 修改_config.yml到自己的配置，然后在_post文件夹里面新增博客即可
  Comments 博客少了评论总感觉哪里不对，因为是GitHub上的静态页面，基本上解决方案有：用多说评论，Disqus，或者是用GitHub issue来定制化评论
（我一开始还以为disqus == disquz）
综合各方面，我采用了Disqus，根据官方的说明文档</description>
    </item>
    
    <item>
      <title>为什么我要写博客</title>
      <link>https://liriansu.com/posts/2015-09-23-why-im-blogging/</link>
      <pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-09-23-why-im-blogging/</guid>
      <description>我其实很喜欢看别人写的东西，技术类的、非技术类的，中文的、英文的。
很多人写文章的时候总喜欢说一句
 我先抛砖引玉
 但是往往他们写的都非常好
这样的文章看的我特手痒，想也写博客，但是问题就来了
 博客的主题是什么？ 我一直有着写点什么的习惯，以前总是休闲散文写的比较多，更多是偏向于一种日记类的文章。
自从看了陈皓和Jeff Atwood的技术类博客以后，总有种写*好的*技术博客的冲动。
因为我对逻辑、语言、思考都感兴趣，而我又不能准确描述我这些兴趣，那我就把它们都写出来好了。
XKCD的自我描述是
 A webcomic of romance, sarcasm, math and language
 希望我也能写出这种主题鲜明，又有趣又妙不可言的文章
我有什么能写出来的? 作为一个菜鸟，我最熟练的VIM水平其实放在网络上也只是一般
同时根据三人行必有我师焉，也意味着来到这个博客的人中每三个里就有一个比我厉害
（我是不是应该放一个博客访问计数器？然后每到三个倍数就alert(&amp;ldquo;Congratulations&amp;rdquo;)一下&amp;hellip;
不过既然大家都比我懂的多，那我也就不怕献丑了。
好玩的，要费脑子的问题，或者对人生的杂念都会被我写下来。
中文博客还是英文博客？ 讲道理的话，这个问题我想了很久。
以至于我都快走火入魔了，同样的文章写了一份中文的和一份英文的
后来想了想，主要基于几个观点：
1. 母语是中文，所以中文写的会比英文写的更顺畅
2. 语言的选择决定了受众的范围，而外国受众大部分不了解中国的亚文化
3. 个人而言，以后认识的国内朋友可能会更多，这本身是一个不错的名片
于是，我便踏上了博客之路。
现阶段目标是每周一篇吧，就像Jeff说的一样：
 Pick whatever schedule works for you. And be realistic. I think starting with one post a month, like Catto, is a fine goal. Try to slowly ramp it up a bit over time as you get into the groove, and you&amp;rsquo;re on your way.</description>
    </item>
    
    <item>
      <title>我和女权的我打起来了</title>
      <link>https://liriansu.com/posts/2015-08-27-fight-with-the-feminist-me/</link>
      <pubDate>Thu, 27 Aug 2015 20:28:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-08-27-fight-with-the-feminist-me/</guid>
      <description>一直以来我都自以为是一个大男子主义的人，
但我和女权的我相处的都比较和谐。
但是今晚我和女权的我打起来了。
 （一）
一直以来我都自以为是一个大男子主义的人，
但我和女权的我相处的都比较和谐。
但是今晚我和女权的我打起来了。
（二）
做完饭以后，我把每个菜都尝了一遍。
自我感觉还是挺不错的，只是菜的扮相不是特别好。
我忧伤的想道：
“假如我是个女的就好了，以后就找个有钱的，天天研究怎么做菜。”
这时，女权的我突然跳了出来：“你这样想是不对的！”
我在吓了一跳的同时意识到了我话里隐含的逻辑漏洞，
赶快心虚地解释道：“不不不，假如我是个男的我也找个有钱的&amp;hellip;”
女权的我看出了我的心虚，一针见血地说道：“你潜意识并不这么想。”
男人嘴巴上的尊严让我让步不能，我于是反问：
“那就我找一个会做饭的，我去挣钱养家，可以伐？”
女权的我立刻就回答道：
“你不能这么想。只有女性在自己选择了想做饭以后，你才可以这么想。”
我眼神里充满了怀疑（别问我自己怎么知道的，真男人从来不照镜子）
“也就是说我是男的，依据女权的观点，我不能希望女的会做饭，但是假如我是女的，希望自己会做饭，这是可以的，而且是女权的？”
女权的我盯着我，想了一下：“对的。”
我退了一步，先使出一招&amp;lt;以退为进&amp;gt;：“所以其实女权是提倡平等？”
女权的我紧跟着，使出了一招&amp;lt;海阔天空&amp;gt;：“是的，女权其实就是平权，你微博读的不错。”
我立马使出连招&amp;lt;车五进一&amp;gt;&amp;lt;猴子捞月&amp;gt;：“那所以根据平权的观点，我也可以希望自己的配偶是醉心于为我做饭的？”
没想到女权的我只用了一招&amp;lt;不动如山&amp;gt;就化解掉了我的所有言语：
“你个人可以这么想，但是有这个想法，你基本上就孤独终老了。”
（三）
可能是因为招数太华丽，有可能是因为无懈太可击，也可能是蚍蜉撼大树是两个好朋友，一走神我就发现自己出于了下风。
于是我放下了筷子，重新开始了游戏：
“假如说我是女的，而且我是男权的，我就希望老公棒棒的，我差差的，何如？”
“假如你是女的…”
女权的我一开口，我就松了一口气，还好女权的我没有反驳说“你不可能是个女的”。
在这个问题上我可真争不过，
毕竟我前几周才知道我一直爱慕的丝袜其实囊括了打底裤。
那一瞬间，我从“喜欢丝袜”的变态，变成了“喜欢打底裤”的傻逼。
不过话说回来，打底裤看起来其实也不错，关键还是要看腿。
“假如你是女的，你就不会这么想了。”女权的我简明扼要地告诉我。
这个问题我也争不过。
因为这个问题讲下去，就会变成“你又不是庄子，你又不知道惠子眼中的鱼知不知道自己是怎么想的”了，
而且最终还会变成“庄子//转发本条锦鲤”这样的东西。
我看了看渐渐变凉的饭和渐渐消失的饿，意识到我要先去收剩菜了
“我先去下厨房”
“哦”女权的我答应道。
（五）
“你咋去了这么久？”女权的我看我回来得比较迟
“没办法，一个人老做两人份的饭，收起来累，刚说到哪了。”我挺着肚子坐了下来。
“刚说到假如你这样的女生，肯定也是支持女权的。”
我有点不服气：“难道所有女的都是女权的？比如我有个儿子，那我也希望将来的媳妇要对他好给他做饭好好照顾他，这也不行？”
“的确，现实生活中有很多这样的婆婆，所以女权运动任重道远啊。”女权的我叹了口气，看起来很忧郁的样子。
我还是不服气：“就算按女权的观点，也不是万事平等的吧。扛东西肯定是男的来吧？万一打仗征兵呢？肯定是男的吧，可是会死人的。”
女权的我立刻指出了我题设的漏洞：“女权反对战争，不止女权，人权都反对战争。文明越发达，战争的可能性越少。”
想了想，女权的我估计是没有玩过《文明》的，就没有整下去了。
而且“可能性应该用小，而不是少”这句话也犹豫了一下，没有说出来。
看我有点踌躇的感觉，女权的我使出了终极武器：
“你刚才讲的的确是男性弱势的地方，但是那些发生机会都少，而女性，还要生育呢。”
听了这句话，虽然我心里有很多“不是说生小孩是自己选的吗？说好的选择了生育就选择了责任呢？”“说好的女性不是生育机器呢？”“男的也可以生小孩以后就不用女权了吗？”一系列问题，但最终还是没有说出口，点了点头表示了赞成。
因为突然想到了我妈，假如她也比较女权的话那她肯定活的比较自由，不用这么在意我了。
（六）
安静了一阵子，我问女权的我：
“其实我们讲话还是挺科学的啊，为啥我一直觉得我要和你打起来了？”
女权的我深了个呼吸，叹道：
“我也不想的。大概是整个社群比较激进，很多人的观点就是叫的越大声醒来的人才越多，我也不赞成这样的观点。但是没办法，毕竟辛德勒是在战乱结束以后才被拍成电影的，所以很多事情都要慢慢看的。”
我不禁赞同：“嗯，基督山伯爵也说嘛，等待，和希望。”
在气氛缓和了以后，男人残留在嘴巴上的尊严马上又让我跳了出来：
“不过我还是不赞同女权，我还是很大男子主义的。我觉得女性就应该柔弱一些，这样子不同性别的人都能发挥自己的特长到最好。其实女权和男权就应该像猪和驴在年货里的关系一样，反正我是不赞同男权的。说不定我还有处女情结呢！”
女权的我看了看我，笑道：“ツ 没事，我也有处男情结。”</description>
    </item>
    
    <item>
      <title>如何优雅地使用Perl的常量模块</title>
      <link>https://liriansu.com/posts/2015-07-25-how-to-set-perl-constant-module/</link>
      <pubDate>Sat, 25 Jul 2015 20:56:06 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-07-25-how-to-set-perl-constant-module/</guid>
      <description>最近的Perl Coding遇到了一个问题：需要对一系列常量进行合法性检测。
在Research&amp;amp;Develop后，有一些心得。
本文从Perl的常量定义上，给出一个_自认为_优雅的解决方案。
 Perl中一般的常量定义 在写项目的时候为了避免Magic Number的情况，我们经常需要定义常量。
当然了，根据如何写出无法维护的代码的指导我们不应当定义常量，Number越Magic越好。
一般来说，Perl中的常量如下：
use constant CONST_PI =&amp;gt; 3.1416;  在模块化的编码过程中，随着常量的增多，我们会需要把这些常量放到一个常量模块(Perl Module)里面：
这样的做法也符合DRY(Don&amp;rsquo;t Repeat Yourself)的原则。#DRYBestPractice?
比如说在哼哧哼哧地写了一阵子以后，我们有下面这个常量模块。
package Lirian::Constants; use strict; use warnings; #Math Const use constant CONST_PI =&amp;gt; 3.1416; use constant CONST_E =&amp;gt; 2.718; #Default Config Parm Name use constant PARM_DB_NAME =&amp;gt; &#39;dbName&#39;; use constant PARM_DB_HOST =&amp;gt; &#39;dbHost&#39;; use constant PARM_GIT_USER =&amp;gt; &#39;gitUser&#39;; require Exporter; our @ISA = qw(Exporter); our @EXPORT_OK = qw( CONST_PI CONST_E PARM_DB_NAME PARM_DB_HOST PARM_GIT_USER ); our %EXPORT_TAGS = ( all =&amp;gt; \@EXPORT_OK, math =&amp;gt; [qw( CONST_PI CONST_E )], parm =&amp;gt; [qw( PARM_DB_NAME PARM_DB_HOST PARM_GIT_USER )], );  上面这段代码简单粗暴地展示了Perl中的常量模块。</description>
    </item>
    
    <item>
      <title>记一次有意义的吹B</title>
      <link>https://liriansu.com/posts/2015-06-12-a-chat-with-roommates/</link>
      <pubDate>Fri, 12 Jun 2015 22:06:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-06-12-a-chat-with-roommates/</guid>
      <description>（一）引言
我经历了一场绝妙的装B
可是这个地方太小写不下
——@ooCast
（可能内含各种广告）
 （二）
某天下午和室友们吹了一场有意义的B，
当时觉得不记下来的话，毕设也写不安稳，
但是最后权衡了一下，还是毕设特么重要，
所以直到毕设写完了才开始记录这次寝室谈话。
记忆力和文笔都不好，请多担待。
（三）租房
话说最近在签三方的事情，和周丞一起去学生服务中心交表格。
路上我问周丞租房子的事情，
然后相互吐槽了一下租房还真蛮贵的，
想住的离公司比较近的话一个月就要2k~3k。
而且周丞懒，想租蘑菇公寓的房子，又要额外1k。
不禁感慨了一番在魔都干个十年，
要被房子吃掉好多钱，
而且在这里买房子真不值。
于是又探讨起了干十年就卷钱走人的可能性，
主要问题有2：
 很可能三十岁回老家的时候还是单身
 回去以后是否有对口的工作
  周丞觉得第一的话现在相亲市场这么发达，不慌，
他认为到时候他就是有房、有车、单身、没有不良嗜好的优质大叔了
第二个问题倒挺忧伤的，
因为他查了一下，马兰坡Python程序员只有一个地方在招人：
芒果TV。
（四）毕业工作
后来回到了寝室，问小赖打算怎么样。
小赖说他出国没有理想的offer，想先gap一年，实习一下。
我和周丞便怂恿他找我们内推，小赖便问一天多少钱，
我们表示实习钱差不多，基本上都是180/d，转正后工资才是重要的。
小赖表示他不转正，这个不重要。
过了一会他又忍不住问“像我们这种码农值多少钱？”
于是我们展开了讨论，得出结论：
 根据现状来看，第一年的基本上是100k/y到240k/y之间
 正常的码农干个三年，几十万年薪是有的
 再不济，随便学点C艹，Java，每个月拿半狗（150k/y)是有的
 但是很少有码农能拿到百万年薪（周丞：知乎上就三个）
  “走走走，看工作去” 我们三人凑在显示器前，默默打开了草榴…
唔…开错网了，于是我们关掉了草榴，
默默打开了赶集、智联、拉勾网、JobDeer和各种互联网公司的hr主页
（五）职业去向
到网上一搜，果然大部分都是招什么Java开发工程师，10k/m，要求三年工作经验。
然后我们又吐槽了一下，居然要求程序员工作经验，太扯了，
殊不知有些人是复制粘贴编译改Bug循环了三年。
我们觉得这个薪资太低了，果断按了 高级搜索-&amp;gt;筛选-&amp;gt;月薪大于50k
然后出来的职位包夸：产品经理、美X网中国区总经理、总架构师blablabla。
面面相觑，
“难道我们干几年就几乎全部要转管理了？”
小赖表示他不服，他想当羽毛球教练（小赖：每次我去南体都觉得那个教练菜）
我和周丞极力赞扬他：“你看，羽毛球这运动很好的，很多白富美喜欢。说不定你就被看上了！”
于是我们就去网上搜了一下羽毛球教练的工资：6k一个月。
小赖表示他还是当程序员吧。
（六）钱的去向</description>
    </item>
    
    <item>
      <title>Vagrant-up遇到mount no device的解决方案</title>
      <link>https://liriansu.com/posts/2015-05-15-vagrant-up-but-mount-no-device-zh/</link>
      <pubDate>Fri, 15 May 2015 10:29:05 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-05-15-vagrant-up-but-mount-no-device-zh/</guid>
      <description>今天跑vagrant up的时候遇到了这个问题：
 ==&amp;gt; cvc-tools: Machine booted and ready! ==&amp;gt; cvc-tools: Checking for guest additions in VM... ==&amp;gt; cvc-tools: Configuring and enabling network interfaces... ==&amp;gt; cvc-tools: Mounting shared folders... cvc-tools: /work =&amp;gt; D:/work/ Failed to mount folders in Linux guest. This is usually because the &amp;quot;vboxsf&amp;quot; file system is not available. Please verify that the guest additions are properly installed in the guest and can work properly. The command attempted was: mount -t vboxsf -o uid=`id -u devel`,gid=`getent group devel | cut -d: -f3` work /work mount -t vboxsf -o uid=`id -u devel`,gid=`id -g devel` work /work The error output from the last command was: /sbin/mount.</description>
    </item>
    
    <item>
      <title>用Openpyxl做两个Excel文件的比对</title>
      <link>https://liriansu.com/posts/2014-08-28-compare-excel-with-openpyxl/</link>
      <pubDate>Thu, 28 Aug 2014 10:31:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2014-08-28-compare-excel-with-openpyxl/</guid>
      <description>起因 最近老是要做比对Excel报表的工作，于是想写一个Python的小脚本来做这个工作。
关于Python的Excel处理，以前只用过xlrd库，处理的是Office03的.xls文件。
这次写小工具的同时也是学习一下新的东西。
 准备工作 由于本次要比对的报表是Office07的.xlsx文件，上网查了一下Python怎么做比较合适。
看了几篇心得以后，敲定用Openpyxl（参考如下链接：）
 Python处理Excel的四个工具
 于是接下来是装Openpyxl，到官网上按照流程装了一发：
 A Python Library: Openpyxl
 由于源码是到BitBucket上拖下来的，所以顺便还装了SourceTree。
据说SourceTree还有Git的相关功能，下次可以体验一下。
使用Openpyxl Openpyxl装好以后直接import就能用啦：
from openpyxl import *  Openpyxl还提供了一个非常棒的教程（有点过于简单
 Openpyxl Tutorial
 Openpyxl还有个弊端就是文档不怎么详细，只能去翻源码。
最终代码 可以到我写的PythonScripts里找到我写的版本：
PythonScripts - ExcelComparer</description>
    </item>
    
    <item>
      <title>我的好友陈伟杰</title>
      <link>https://liriansu.com/posts/2014-07-20-my-friend-edward/</link>
      <pubDate>Sun, 20 Jul 2014 22:55:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2014-07-20-my-friend-edward/</guid>
      <description>(1) 莫泊桑或者是福楼拜说过：
要写好描写性的文章，
你至少要写40个人。
 综上所述，培根也说过：
知识就是力量，大家少吃培根。
 我并不想写好描述性的文章。
 我跟ED实在是太熟了，
不描写他一发简直心痒难耐。
  (2) ED，中文的名字是陈伟杰，
英文名字是ED。
跟别人介绍他的时候经常会是：
 “这是ED。”
 “诶！ED的意思难道是……？”
 “不是的啦…只是名字简写…”
  于是后来ED学会了一个新的词——蒟蒻。
(3) 我们口中的ED发音是&#39;ed。
不过因为叫的多了，
所以“阿达”，“阿达娃”这种称呼也出来了。
有一次一个学弟对着他的名字念了个,i:di:&#39;wəd
于是ED就又多了一个“一滴喔的”这样奇怪的外号。
(4) ED在大部分网站上的账号都是edward_mj。
据他所说是因为edward这个名字实在是太常见了，
这样的账号都被抢注了。
于是他只好加个mj的后缀，
意思是“马甲”。
久而久之mj反而成了他的本体……
现在浙大的同学都叫他“马甲”……
(5) ED并不介意熟人怎么叫他。
事实上对熟人在大部分事情上ED都相当随意。
 某次我们annually跑到ED家附近去玩，
大家怂恿ED来BG一发，
ED就很鱼块地BG了一发。
 最近ED用自己的服务器搭了个能上Google的业务，
他也直接拿出来给大家用了。
  (6) 但是ED在生人面前看起来非常地羞涩&amp;amp;正经。
由于混熟了以后大家对于ED感觉反差太大了，
于是ED获得了很多好友的一致评价：“（闷）骚”。
至今还有很多人叫ED“骚杰”
ED觉得非常蛋疼，
问我：“你说为什么会这样子捏”
我想了想，
说：
“可能是因为你真的很（闷）骚吧。”
其实骚也没什么，
屈原也骚。
(7) 初中的时候我在1班，
ED在2班，</description>
    </item>
    
    <item>
      <title>0x5f3759df 一个神奇的数字</title>
      <link>https://liriansu.com/posts/2014-03-07-magic-number/</link>
      <pubDate>Fri, 07 Mar 2014 14:11:31 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2014-03-07-magic-number/</guid>
      <description>今天在看各种算法介绍的时候看到了这么一句话“神奇数字0x5f3759df并不是约翰·卡马克发明的。之所以一开始被误解，主要是许多对卡神光环膜拜已久的游戏程序员在读Quake3源码时吓尿了……”一下子引起了我的好奇心，在查阅了一些资料以后整理整个故事如下。
 雷神之锤3 雷神之锤3（Quake3）是90年代的经典FPS游戏，不仅画面精美，而且整个程序优化得很好，在配置一般的电脑上也能流畅地运行。这主要归功于其3D引擎id Tech3，而此引擎是由约翰·卡马克（John Carmack）领导开发的。
卡马克是一个美国码农，id Software的创始人之一，他因在3D技术上的杰出成就而文明。卡马克还是一个开源软件的倡导者，1996年他放出了雷神之锤的源代码，而一个程序员将其改写成了Linux的版本并发给了卡马克。卡马克没有认为这是侵权，反而是要求他的员工们以这个补丁为基础开发雷神之锤的Linux版本。后来的日子id Software也一样公布了雷神之锤2的源代码，在2005年，雷神之锤3的源代码也被放出来了。
（这是官方下载地址ftp://ftp.idsoftware.com/idstuff/source/quake3-1.32b-source.zip）
我们知道，越底层的函数调用越频繁，假如把底层函数优化做好了，效率自然就上去了，3D引擎归根到底还是数学运算。在最底层的运算函数中（game/code/q_math.c中），有许多有趣的函数，有些更是令人惊叹这究竟是如何编写的。
神奇的0x5f3759df 在运算函数文件中可以找到这么一个函数，它的作用是将一个数开方并取倒数，功能上跟系统函数(float)(1.0/sqrt(x))一样，但是效率上快了四倍：
float Q_rsqrt( float number ) { long i; float x2, y; const float threehalfs = 1.5F; x2 = number * 0.5F; y = number; i = * ( long * ) &amp;amp;y; // evil floating point bit level hacking i = 0x5f3759df - ( i &amp;gt;&amp;gt; 1 ); // WHAT THE FUCK? y = * ( float * ) &amp;amp;i; y = y * ( threehalfs - ( x2 * y * y ) ); // 1st iteration // y = y * ( threehalfs - ( x2 * y * y ) ); // 2nd iteration, this can be removed #ifndef Q3_VM #ifdef __linux__ assert( !</description>
    </item>
    
  </channel>
</rss>